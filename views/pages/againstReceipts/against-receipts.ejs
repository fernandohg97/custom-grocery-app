<%- include('../../partials/spinner'); %>

<!-- success message -->
<div id="success-message" class="alert alert-success d-none text-center w-75 fs-6" role="alert">Proveedor exitoso</div>
<!-- failure message -->
<div id="failure-message" class="alert alert-danger d-none text-center w-75 fs-6" role="alert"></div>


<!-- titulo -->
<div class="app-page-title">
  <div class="page-title-wrapper">
    <div class="page-title-heading">
      <div class="">
        <h4 class="mb-1 mt-0">Contra recibos</h4>
        <div class="page-title-subheading">Este es un demo (en proceso) del nuevo sistema interno de Mercado DOS MIL.</div>
      </div>
    </div>
    <div class="d-flex justify-content-end float-end">
      <button id="new-contra-recibo" type="button" class="btn btn-primary btn-sm">+ Nuevo contra recibo</button>
    </div>
  </div>
  
</div>


<!-- Card RESUME stats -->
<div class="row gx-5 mb-4 text-center">
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
          <div class="card-body">
              <div class="row">
                  <div class="col">
                      <span class="h6 font-semibold text-muted text-sm d-block mb-2">Cantidad</span>
                      <span id="totalDueAmount" class="h3 font-bold mb-0">0</span>
                  </div>
              </div>
              <div id="percentageBalanceProgress" class="mt-2 mb-0">
                  <!-- <span class="badge badge-pill bg-soft-success text-success me-2">
                      <i class="bi bi-arrow-up me-1"></i>13%
                  </span>
                  <span class="text-nowrap text-xs text-muted">Debes subir!</span> -->
              </div>
          </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Total</span>
                  <span id="totalCount" class="h3 font-bold mb-0">0</span>
              </div>
          </div>
      </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Saldo</span>
                  <span id="totalBalanceAmount" class="h3 font-bold mb-0">0</span>
              </div>
          </div>
      </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Total</span>
                  <span id="total" class="h3 font-bold mb-0">0</span>
              </div>
          </div>
      </div>
      </div>
  </div>
</div>
<!-- Button trigger modal -->
<!-- <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#resumeAddPaymentMultipleModal">
  Launch static backdrop modal
</button> -->


<!-- TABLE CONTRA RECIBOS -->
<!-- <div class="table-responsive mb-3"> -->
  <div class="row justify-content-end text-end mb-1">
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="minCompras" name="minCompras" placeholder="Fecha inicio">
      </div> -->
      <label class="text-secondary m-0 p-0 fw-bold" style="font-size: 12px;">Inicio</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon1"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="minContraRecibos" aria-label="minContrarecibos" aria-describedby="basic-addon1">
      </div>
    </div>
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="maxCompras" name="maxCompras" placeholder="Fecha fin">
      </div> -->
      <label class="text-secondary m-0 p-0 fw-bold" style="font-size: 12px;">Fin</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon2"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="maxContraRecibos" aria-label="maxContrarecibos" aria-describedby="basic-addon2">
      </div>
    </div>
    <!-- button wrapper purchases-->
    <div class="col-8">
      <div id="buttons-wrapper-against-receipts" style="margin-bottom: 5px;"></div>
      <div id="invalid-message-user-check" class="invalid-message-user-check text-end d-none d-block" style="font-size: 12px; color: red;">
        Por favor selecciona más de 1 cuenta por pagar.
      </div>
    </div>
  </div>
  <table id="againstReceiptsTable" class="display compact hover stripe" width="100%" style="font-size: 13px;">
    <tfoot>
      <tr>
        <th colspan="3" class="text-start">Total:</th>
        <th></th>
      </tr>
    </tfoot>
  </table>
<!-- </div> -->




<%- include('../../partials/scripts'); %>

<script>
  
  const nodeEnv = '<%= process.env.NODE_ENV %>'
  let apiUrl = '<%= process.env.API_URL %>'
  console.log(apiUrl)
  console.log(nodeEnv)
  let againstReceiptsData = '<%- jsonResponse %>'
  againstReceiptsData = againstReceiptsData.replace(/\s+/g," ")

  let jsonAgainstReceipts = JSON.parse(againstReceiptsData)
  console.log(jsonAgainstReceipts)
  var datetimeExportText = "Exportado el día: " + new Intl.DateTimeFormat('es-MX', { dateStyle: 'long', timeStyle: 'medium', hour12: true }).format(new Date())

  const AllAgainstReceiptsApp = {}

  // on load
  AllAgainstReceiptsApp.onLoad = () => {
    // loading spinner
    AllAgainstReceiptsApp.loadingSpinner = document.getElementById('loading-spinner-add')
    AllAgainstReceiptsApp.loadingSpinnerMsg = document.getElementById('spinner-add-message')
    // ---------- APP LOCAL VALUES
    AllAgainstReceiptsApp.DEFAULT_AGAINST_RECEIPT_STATUS = '<%- defaultAgainstReceiptStatus %>'
    AllAgainstReceiptsApp.DEFAULT_AGAINST_RECEIPT_STATUS = JSON.parse(AllAgainstReceiptsApp.DEFAULT_AGAINST_RECEIPT_STATUS)
    // CURRENT VIEW VARS

    // call initial functions
    // AllAgainstReceiptsApp.setInitialValues()
    AllAgainstReceiptsApp.getAgainstReceiptsDataTable()
  }


  // GET AGAINST RECEIPT DATA TABLE -------------------
  // CONSTRUIR TABLA DE CUENTAS POR PAGAR
  AllAgainstReceiptsApp.getAgainstReceiptsDataTable = async () => {

    // DATATABLE ------------
    let againstReceiptsTable = $('#againstReceiptsTable').DataTable({
        responsive: true,
        fixedHeader: true,
        // footerCallback: function (row, data, start, end, display) {
        //     var api = this.api();

        //     // Remove the formatting to get integer data for summation
        //     var intVal = function (i) {
        //         // return i
        //         // return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : Number(i.replace(/[\$,]/g, '') * 1);
        //         // return isNaN(i) === true ? 0 : typeof i === 'string' ? isNaN(i.replace(/[\$,]/g, '') * 1) : typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
        //         return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : typeof i === 'number' ? i : 0;

        //     };
        //     // console.log(intVal)
        //     console.log(api.column(3, {page: 'current'}).data())
        //     // Total over this page
        //     let pageTotal = api
        //         .column(2, { page: 'current' })
        //         .data()
        //         .reduce(function (a, b) {
        //           console.log(`Numero: ${intVal(a)}`)
        //             // a = isNaN(a) === true ? 0 : a
        //             // b = isNaN(b) === true ? 0 : b
        //             return intVal(a) + intVal(b);
        //         });
        //     console.log(`Total: ${pageTotal}`)

        //     // Update footer
        //     $(api.column(2).footer()).html(new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(pageTotal));
        // },
        headerCallback: function(thead, data, start, end, display) {
          $(thead).find('th').css('border-bottom', 'none');
        },
        paging: true,
        data: jsonAgainstReceipts.againstReceiptsData,
        stripeClasses: [ 'strip1', 'strip2' ],
        // TODO: set columns correctly
        columns: [
            // { data: null, orderable: false, className: 'select-checkbox', defaultContent: '', width: '5%' },
            { title: 'Folio', data: 'Folio' },
            { title: 'Proveedor', data: 'Proveedor'},
            { title: 'Notas', data: 'CantNotas', className: 'text-center'},
            { title: 'Total', data: 'Total'},
            { title: 'Fecha a pagar', data: 'FechaAPagar', orderable: true, searchable: false },
            { title: 'Forma de pago', data: 'FormaDePago', orderable: false }, //5
            { title: 'Cuenta', data: 'CuentaDeDinero', orderable: false, visible: false }, //5
            { title: 'Estatus', data: 'Estatus', orderable: false }, //5
            { title: 'Autorizado', data: 'Autorizado', orderable: false }, //5
            { title: 'Usuario', data: 'Usuario', orderable: false, visible: false }, //5
            { title: 'Detalles', data: 'Detalles', orderable: false, visible: false }, //5
            { title: 'Creado', data: 'Creado', orderable: false }, //5

            // { title: 'Tipo', data: 'Tipo', visible: true },
            // { title: 'Usuario', data: 'Usuario', orderable: false, visible: true },
            // { title: 'Detalles', data: 'Detalles', visible: false, searchable: false },
            { title: 'Editar', orderable: false, searchable: false }, // 9
            // { title: 'Eliminar', orderable: false, searchable: false }
        ],
        columnDefs: [
          { className: "fw-bold", targets: 3, width: "10%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '12px')
            },
            render: function (data) {
              const formatNumber = isNaN(data.replace(/[\$,]/g, '') * 1) ? 0 : data.replace(/[\$,]/g, '') * 1;
              return `${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(formatNumber)}`
            }
          },
          { className: "fw-bold", targets: 0, width: '5%', createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '11px')
            },
            render: function (data) {
              return `#${data}`
            }
          },
          { targets: 1, width: "25%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '13px')
            } 
          },
          { className: "fw-bold text-center", targets: 7, width: '10%',
            createdCell: function (td, cellData, rowData, row, col) {
              if (cellData === 'ENVIADO AL PROVEEDOR') {
                $(td).html(`<span class="badge" style="background-color: blue; color: white;">${cellData}</span>`)
              } else if (cellData === 'BORRADOR') {
                $(td).html(`<span class="badge" style="background-color: grey; color: white;">${cellData}</span>`)
              }
            }
          },
          { targets: 4, width: "10%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '12px')
            },
            render: function ( data, type, row, meta ) {
              // console.log(data)
              // return data
              if (data.length > 0) {
                return type === 'sort' || type === 'display' || type === 'filter' ? (moment(new Date(data)).format("DD MMM YYYY")) : new Date(data)
              } else return "n/a"
            }
          },
          { targets: 11, width: "10%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '11px')
            }
          },
          { targets: 5, width: "10%", className: 'text-center fw-bold',
          createdCell: function(td, cellData, rowData, row, col) {
              $(td).css('font-size', '10px')
              if ( cellData == 'EFECTIVO' ) {
                $(td).css('color', '#0e7c61')
              } else if (cellData == 'TRANSFERENCIA ELECTRONICA') {
                $(td).css('color', '#0095c2')
              } else if (cellData == 'TARJETA DE CREDITO') {
                $(td).css('color', '#6551a1')
              } else if (cellData == 'TARJETA DE DEBITO') {
                $(td).css('color', '#399db4')
              } else if (cellData == 'CHEQUE') {
                $(td).css('color', '#434343')
              }
            }, render: function (data, type, row, meta) {
              return data.length > 0 ? data : 'n/a'
            }
          },
          { targets: 8, width: "5%", className: 'text-center',
          createdCell: function(td, cellData, rowData, row, col) {
              if ( cellData == 'SI' ) {
                $(td).css('color', 'green')
              } else if (cellData == 'NO') {
                $(td).css('color', 'red')
              }
            }, render: function (data, type, row, meta) {
              return data.length > 0 ? data : 'n/a'
            }
          },
          { targets: 12, "width": "5%", className: "text-center",
            render: function (data, type, row, meta) {
              return `
              <div class="dropdown">
                <button type="button" id="dropdownMenuEdit" class="btn btn-light" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></button>
                <ul style="font-size: 14px;" class="dropdown-menu" aria-labelledby="dropdownMenuEdit">
                  ${row.Autorizado === 'NO' ? 
                  `<li>
                    <a href="/against-receipts/authorize/${row.Folio}" class="text-dark dropdown-item">
                    Autorizar
                    </a>
                  </li>` : row.Autorizado === 'SI' && row.Estatus === 'PAGADA' ?
                  `<li>
                    <a href="#" class="text-dark dropdown-item">
                    Ver info
                    </a>
                  </li>` : row.Autorizado === 'SI' && (row.Estatus === 'ENVIADO AL PROVEEDOR' || row.Estatus === 'PROGRAMADA') ?
                  `<li>
                    <a href="/against-receipts/add-payment/${row.Folio}" class="text-dark dropdown-item">
                    Pagar
                    </a>
                  </li>` :
                  `<li>
                    <a href="/against-receipts/edit/${row.Folio}" class="text-dark dropdown-item">
                    Editar
                    </a>
                  </li>`
                }
                </ul>
              </div> 
              `
            } 
          },
          // { "targets": 10, "width": "10%", className: "text-center",
          //   "render": function (data, type, row, meta) {
          //     return '<button type="button" disabled class="btn btn-sm btn-danger remove-purchase" onclick="removeCompra('+row[0]+')"><i class="bi bi-trash3"></i></button>'
          //   }
          // },
        ],
        order: [[0, 'asc']],
        select: {
          style: 'os',
          selector: 'td:first-child'
        },
        // select: {
        //   style: 'multiple',
        //   selector: 'tr>td:nth-child(3), tr>td:nth-child(4), tr>td:nth-child(5)'
        // },
        buttons: [
          {
            extend: 'selectAll',
            text: '<i class="bi bi-list-check" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          {
            extend: 'selectNone',
            text: '<i class="bi bi-list" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          // {
          //   extend: 'colvis',
          //   text: '<span style="font-size: 12px;">Ver/ocultar</span>',
          //   // titleAttr: 'Show/Hide',
          //   columns: ':not(.noVis)',
          //   collectionLayout: 'fixed columns',
          //   collectionTitle: 'Seleccionar columnas a ver'
          // },
          { 
            extend: 'pdfHtml5',
            orientation: 'portrait',
            pageSize: 'A4',
            messageTop: 'Este documento es informativo.',
            messageBottom: datetimeExportText,
            text: '<i class="bi bi-filetype-pdf"></i>', 
            className: 'btn btn-dark',
            footer: true,
            title: 'Lista de contra recibos',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
          { extend: 'copy', 
            text: '<i class="bi bi-clipboard-check"></i>', 
            className: 'btn btn-dark',
            title: 'Lista de contra recibos',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
        ],
        "lengthMenu": [ 5, 15, 30 ],
        "pageLength": 10,
        "language": {
          "buttons": {
            copyTitle: 'Datos copiados al portapapeles',
            copySuccess: {
                _: "%d contra recibos copiados al portapapeles"
            },
            colvis: 'Ver/ocultar columnas'
          },
          "decimal":        "",
          "emptyTable":     "No se encontraron datos",
          "info":           "Mostrando _START_ a _END_ de _TOTAL_ contrarecibos",
          "infoEmpty":      "Mostrando 0 a 0 de 0 entries",
          "infoFiltered":   "(Busqueda de _MAX_ contrarecibos en total)",
          "infoPostFix":    "",
          "thousands":      ",",
          "lengthMenu":     "Mostrar _MENU_ contrarecibos",
          "loadingRecords": "Cargando...",
          "processing":     "",
          "search":         "Buscar:",
          "zeroRecords":    "No se encontraron contrarecibos",
          "paginate": {
              "first":      "Primero",
              "last":       "Ultimo",
              "next":       "Siguiente",
              "previous":   "Atrás"
          },
          "aria": {
              "sortAscending":  ": activate to sort column ascending",
              "sortDescending": ": activate to sort column descending"
          }
        },
        // createdRow: function( row, data, dataIndex ) {
        //   details = data[10].toString()
        //   if (details.includes('NU') || details.includes('CREDITO NU') || details.includes('TARJETA NU')) {
        //     $(row).css('background-color', '#E2B6FF');
        //   }
        // },
        drawCallback: function() {
          $('#againstReceiptsTable_paginate ul.pagination').addClass("pagination-sm");
        }
    });

  // SHOW OFF CANVAS ACCOUNT TO PAY RESUME DETAILS
  // $('#againstReceiptsTable tbody').on('click', 'tr td:nth-child(1)', async function () {
  //     var data = accountsToPayTable.row( this ).data();
  //     console.log(data)
  //     AllAccountsToPayApp.paymentsByNoteNumber = await AllAccountsToPayApp.fetchPaymentsByProvider(data['No Nota'])
  //     console.log(AllAccountsToPayApp.paymentsByNoteNumber)
  //     // GUARD STATEMENT
  //     // if (!res) return
  //     const bsOffcanvas = new bootstrap.Offcanvas('#offCanvasAccountToPayPayments')

  //     // Assign initial values to offcanvas
  //     AllAccountsToPayApp.offCanvasPaymentsTitle = document.getElementById('offCanvasAccountToPayPaymentsTitle')
  //     AllAccountsToPayApp.offCanvasPaymentsNote = document.getElementById('offCanvasAccountToPayPaymentsNote')
  //     AllAccountsToPayApp.offCanvasUserNote = document.getElementById('offCanvasAccountToPayUserNote')
  //     AllAccountsToPayApp.offCanvasAccountToPayDateRecordNote = document.getElementById('offCanvasAccountToPayDateRecordNote')
  //     AllAccountsToPayApp.offCanvasAccountToPayTypeNote = document.getElementById('offCanvasAccountToPayTypeNote')
  //     AllAccountsToPayApp.offCanvasTotalPurchaseAmount = document.getElementById('accountToPayTotalPurchaseAmount')
  //     AllAccountsToPayApp.offCanvasAccountToPayBalance = document.getElementById('offCanvasAccountToPayBalance')

  //     AllAccountsToPayApp.offCanvasAccountToPayEstatusNote = document.getElementById('offCanvasAccountToPayEstatusNote')
  //     AllAccountsToPayApp.offCanvasPurchaseDetails = document.getElementById('offCanvasAccountToPayDetails')

  //     // Assign values
  //     AllAccountsToPayApp.offCanvasPaymentsTitle.textContent = data.Proveedor
  //     AllAccountsToPayApp.offCanvasPaymentsNote.textContent = `#${data['No Nota']}`
  //     AllAccountsToPayApp.offCanvasUserNote.textContent = `${data.Usuario || 'n/a'}`
  //     AllAccountsToPayApp.offCanvasAccountToPayDateRecordNote.textContent = data['Fecha Recibido']
  //     AllAccountsToPayApp.offCanvasAccountToPayTypeNote.textContent = data.Tipo
  //     AllAccountsToPayApp.offCanvasAccountToPayEstatusNote.textContent = data.Estatus
  //     AllAccountsToPayApp.offCanvasTotalPurchaseAmount.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(data['Monto Total'].replace(/[\$,]/g, ''))

  //     AllAccountsToPayApp.offCanvasAccountToPayBalance.textContent = AllAccountsToPayApp.paymentsByNoteNumber instanceof Error
  //     ? new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(0)
  //     : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(AllAccountsToPayApp.paymentsByNoteNumber.balance)
  //     AllAccountsToPayApp.offCanvasPurchaseDetails.textContent = data.Detalles || 'n/a'
  //     // Get elements from off canvas table
  //     let table = document.getElementById("accountToPayPaymentsResumeTable");
  //     let paymentsNotFoundMsg = document.getElementById('accountToPayPaymentsNotFoundMessage')
  //     let providerPaymentsTotalQuantity = document.getElementById('accountToPayProviderPaymentsTotalQuantity')

  //     // GUARD STATEMENT
  //     if (AllAccountsToPayApp.paymentsByNoteNumber instanceof Error) {
  //       table.classList.add('d-none')
  //       paymentsNotFoundMsg.classList.remove('d-none')
  //     } else {
  //       // Assign payments data to table in offcanvas
  //       paymentsNotFoundMsg.classList.add('d-none')
  //       table.classList.remove('d-none')

  //       let paymentResumeRows = document.getElementById('accountToPayPaymentResumeRows')
  //       let templateBox = document.getElementById('rowTemplate')
  //       let template = templateBox.content

  //       // let quantityNotesEl = document.getElementById('quantityNotes');
  //       // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
  //       // let providerToPaySelected = document.getElementById('providerToPaySelected')

  //       // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
  //       paymentResumeRows.innerHTML = ''
  //       // $('#payment-invoice-tbody tr').remove()
  //       // data.each(element => console.log(element));
  //       // let getTotalAmountToPay = data.map(row => {
  //       //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
  //       //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
  //       //   return totalAmount
  //       // }).reduce((a, b) => parseFloat(a + b), 0);
  //       // console.log(getTotalAmountToPay)
  //       if (AllAccountsToPayApp.paymentsByNoteNumber.payments.length > 0) {
  //         AllAccountsToPayApp.paymentsByNoteNumber.payments.filter(payment => {
  //           // Get the table element in which you want to add row
  //           console.log(payment)
  //           // Create a row using the inserRow() method and
  //           // specify the index where you want to add the row
  //           let tr = template.cloneNode(true)
  //           let folioCol = tr.querySelector('.folio')
  //           let montoCol = tr.querySelector('.monto')
  //           let fechaCol = tr.querySelector('.fecha')
  //           let formaDePagoCol = tr.querySelector('.formaDePago')
  //           let cuentaCol = tr.querySelector('.cuenta')
  //           let usuarioCol = tr.querySelector('.usuario')

  //           folioCol.textContent = payment.Folio
  //           montoCol.textContent = payment.Monto
  //           fechaCol.textContent = new Intl.DateTimeFormat('es-MX', { dateStyle: 'medium' }).format(new Date(payment.FechaDePago))
  //           formaDePagoCol.textContent = payment.FormaDePago
  //           cuentaCol.textContent = payment.CuentaDeDinero
  //           usuarioCol.textContent = payment.Usuario

  //           paymentResumeRows.appendChild(tr)
  //         })
  //       }
  //       providerPaymentsTotalQuantity.textContent = `Cant. de pagos realizados: ${AllAccountsToPayApp.paymentsByNoteNumber.totalCount}`
  //     }
  //     bsOffcanvas.show()
  // } );

  // Custom filtering function which will search data in column four between two values
  $.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
      if (settings.nTable.id !== 'againstReceiptsTable') {
        return true
      }
      let min = moment($('#minContraRecibos').val()).isValid() ?
        new Date( $('#minContraRecibos').val() ).setUTCHours(0,0,0,0) :
        null;

      let max = moment($('#maxContraRecibos').val()).isValid() ?
        new Date( $('#maxContraRecibos').val() ).setUTCHours(23,59,59,999):
        null;
      console.log('Fecha filtrar')
      console.log(data)
      let splitDate = data[12].split(' ')

      let monthSelected
      for (let prop in months) {
        if (prop.toString().toLowerCase() === splitDate[1].toString().toLowerCase()) {
          monthSelected = months[prop]
          break
        }
      }
      let mon = Number(format_Date(monthSelected)) - 1;
      let date = new Date(Number(splitDate[2]), Number(mon), Number(splitDate[0])).setUTCHours(23, 59, 59, 999)

      if (
        ( min === null && max === null ) ||
        ( min === null && date <= max ) ||
        ( min <= date && max === null ) ||
        ( min <= date && date <= max )
      ) {
        return true;
      }
      return false;
    }
  );

  // Refilter the table
  $('#minContraRecibos, #maxContraRecibos').on('change', function () {
    // $('#accountsToPayTable').DataTable().draw()
    againstReceiptsTable.draw();
  });

  againstReceiptsTable.buttons().container().appendTo('#buttons-wrapper-against-receipts');
  // document.getElementById('total-purchases').textContent = `${accountsToPayData.values.length} cuenta por pagars`
  // loadingSpinner.classList.add('d-none')

}

  AllAgainstReceiptsApp.onLoad()

</script>
