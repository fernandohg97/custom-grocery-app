<%- include('../../partials/spinner'); %>

<!-- success message -->
<div id="success-message" class="alert alert-success d-none text-center w-75 fs-6" role="alert">Proveedor exitoso</div>
<!-- failure message -->
<div id="failure-message" class="alert alert-danger d-none text-center w-75 fs-6" role="alert"></div>


<!-- titulo -->
<div class="app-page-title">
  <div class="page-title-wrapper">
    <div class="page-title-heading">
      <div class="">
        <h4 class="mb-1 mt-0">Cuentas por pagar</h4>
        <div class="page-title-subheading">Este es un demo (en proceso) del nuevo sistema interno de Mercado DOS MIL.</div>
      </div>
    </div>
    <div class="d-flex justify-content-end float-end">
      <button id="new-contra-recibo" type="button" class="btn btn-primary btn-sm">+ Nuevo contra recibo</button>
    </div>
  </div>
  
</div>


<!-- Card RESUME stats -->
<div class="row gx-5 mb-4 text-center">
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
          <div class="card-body">
              <div class="row">
                  <div class="col">
                      <span class="h6 font-semibold text-muted text-sm d-block mb-2">Total</span>
                      <span id="totalDueAmount" class="h3 font-bold mb-0"></span>
                  </div>
              </div>
              <div id="percentageBalanceProgress" class="mt-2 mb-0">
                  <!-- <span class="badge badge-pill bg-soft-success text-success me-2">
                      <i class="bi bi-arrow-up me-1"></i>13%
                  </span>
                  <span class="text-nowrap text-xs text-muted">Debes subir!</span> -->
              </div>
          </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Cant. de notas</span>
                  <span id="totalCount" class="h3 font-bold mb-0"></span>
              </div>
          </div>
      </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Saldo</span>
                  <span id="totalBalanceAmount" class="h3 font-bold mb-0"></span>
              </div>
          </div>
      </div>
      </div>
  </div>
  <div class="col-xl-3 col-sm-6 col-12">
      <div class="card shadow border-0">
        <div class="card-body">
          <div class="row">
              <div class="col">
                  <span class="h6 font-semibold text-muted text-sm d-block mb-2">Total</span>
                  <span id="total" class="h3 font-bold mb-0">0</span>
              </div>
          </div>
      </div>
      </div>
  </div>
</div>
<!-- Button trigger modal -->
<!-- <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#resumeAddPaymentMultipleModal">
  Launch static backdrop modal
</button> -->


<!-- TABLE CUENTAS POR PAGAR -->
<!-- <div class="table-responsive mb-3"> -->
  <div class="row justify-content-end text-end mb-1">
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="minCompras" name="minCompras" placeholder="Fecha inicio">
      </div> -->
      <label class="text-secondary m-0 p-0 fw-bold" style="font-size: 12px;">Inicio</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon1"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="minCuentasPorPagar" aria-label="minCuentasPorPagar" aria-describedby="basic-addon1">
      </div>
    </div>
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="maxCompras" name="maxCompras" placeholder="Fecha fin">
      </div> -->
      <label class="text-secondary m-0 p-0 fw-bold" style="font-size: 12px;">Fin</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon2"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="maxCuentasPorPagar" aria-label="maxCuentasPorPagar" aria-describedby="basic-addon2">
      </div>
    </div>
    <!-- button wrapper purchases-->
    <div class="col-8">
      <div id="buttons-wrapper-accounts-to-pay" style="margin-bottom: 5px;"></div>
      <div id="invalid-message-user-check" class="invalid-message-user-check text-end d-none d-block" style="font-size: 12px; color: red;">
        Por favor selecciona m√°s de 1 cuenta por pagar.
      </div>
    </div>
  </div>
  <table id="accountsToPayTable" class="display compact hover stripe" width="100%" style="font-size: 13px;">
    <tfoot>
      <tr>
        <th colspan="3" class="text-start">Total:</th>
        <th></th>
      </tr>
    </tfoot>
  </table>
<!-- </div> -->

<!-- CARD MONEY ACCOUNTS TO PAY TEMPLATE -->
<template id="cardTemplateMoneyAccountsToPay">
  <div class="col-xl-3 col-sm-6 col-12">
    <div class="card shadow border-0 rounded-4 py-2">
        <div class="card-body">
            <div class="row mb-2">
                    <span class="moneyAccountName fw-bold fs-5 text-body d-block mb-0"></span>
                    <span id="moneyAccountCode" class="moneyAccountCode text-dark d-block fw-light" style="font-size: 11px;"></span>
            </div>
            <div class="row">
                  <span class="moneyAccountBalance fw-medium text-dark d-block" style="font-size: 16px;"></span>
                  <span class="moneyAccountDifference fw-light text-dark d-block mb-2" style="font-size: 12px;"></span>
                  <!-- <div style="height: 20px;" class="progress bg-secondary px-0 ml-2 w-75" role="progressbar" aria-label="Example with label" aria-valuenow="98" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar" style="width: 98%">98%</div>
                  </div> -->
                  <div style="height: 20px;" class="progress bg-secondary px-0 ml-2 w-75 moneyAccountPercentageAvailable" role="progressbar" aria-label="percentage-use" aria-valuenow="" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar"></div>
                  </div>
              <div class="row mt-2">
                  <a href="#" class="card-link text-dark" style="font-size: 13px;">Movimientos</a>
              </div>
            </div>
        </div>
    </div>
  </div>
</template>

<!-- 2DA SECCION CUENTAS POR PAGAR - VISTA EN TARJETAS | TABLA-->
<div class="row justify-content-center align-items-center bg-light mt-2 mb-3">
	<div class="p-3">
		<p class="text-start py-2 fs-4 fw-medium">Cuentas de retiro</p>
		<nav class="mb-0">
			<div class="nav" id="nav-tab" role="tablist">
				<button class="nav-link active" id="nav-cards-tab" data-bs-toggle="tab" data-bs-target="#nav-cards" type="button" role="tab" aria-controls="nav-cards" aria-selected="true">Tarjetas</button>
				<button class="nav-link" id="nav-table-tab" data-bs-toggle="tab" data-bs-target="#nav-table" type="button" role="tab" aria-controls="nav-table" aria-selected="false">Tabla</button>
			</div>
		</nav>
		<div class="tab-content p-0 bg-light mt-0" id="nav-tabContent">
			<div class="tab-pane fade active show p-0" id="nav-cards" role="tabpanel" aria-labelledby="nav-cards-tab">
				<!-- Card money accounts stats -->
        <div id="moneyAccountsToPayCards" class="row gx-5 gy-2 mb-4 text-start mt-0">

        </div>
			</div>
			<div class="tab-pane fade" id="nav-table" role="tabpanel" aria-labelledby="nav-table-tab">
        <!-- <p><strong>This is some placeholder content the Home tab's associated content.</strong>
					Clicking another tab will toggle the visibility of this one for the next. The tab JavaScript swaps
					classes to control the content visibility and styling. You can use it with tabs, pills, and any
					other <code>.nav</code>-powered navigation.</p> -->
				<!-- <div class="table-responsive mb-3"> -->
          <div class="row justify-content-end text-end">
            <div class="col-12">
              <div id="buttons-wrapper-money-accounts-to-pay" class="mb-1"></div><br>
              <div id="invalid-message-money-check" class="invalid-message-money-check text-start d-none mt-1" style="font-size: 12px; color: red;">
                Por favor selecciona mas de 1 cuenta por pagar.
              </div>
            </div>
          </div>
          <table id="moneyAccountsToPayTable" class="display compact hover" width="100%" style="font-size: 13px;">
            <!-- <tfoot>
              <tr>
                <th colspan="3" class="text-start">Total:</th>
                <th></th>
              </tr>
            </tfoot> -->
          </table>
        <!-- </div> -->
			</div>
		</div>
	</div>
</div>




<%- include('../../partials/scripts'); %>


<script>
  
  const nodeEnv = '<%= process.env.NODE_ENV %>'
  let apiUrl = '<%= process.env.API_URL %>'
  // let defaultPurchaseStatus = '<%- defaultPurchaseStatus %>'
  // defaultPurchaseStatus = JSON.parse(defaultPurchaseStatus)
  console.log(apiUrl)
  console.log(nodeEnv)
  let accountsToPayData = '<%- jsonResponse %>'
  accountsToPayData = accountsToPayData.replace(/\s+/g," ")

  let jsonAccountsToPay = JSON.parse(accountsToPayData)
  // console.log(jsonAccountsToPay)
  var datetimeExportText = "Exportado el d√≠a: " + new Intl.DateTimeFormat('es-MX', { dateStyle: 'long', timeStyle: 'medium', hour12: true }).format(new Date())

  const AllAccountsToPayApp = {}

  AllAccountsToPayApp.onLoad = () => {
    // loading spinner
    AllAccountsToPayApp.loadingSpinner = document.getElementById('loading-spinner-add')
    AllAccountsToPayApp.loadingSpinnerMsg = document.getElementById('spinner-add-message')
    // ---------- APP LOCAL VALUES
    AllAccountsToPayApp.DEFAULT_PURCHASE_STATUS = '<%- defaultPurchaseStatus %>'
    AllAccountsToPayApp.DEFAULT_PURCHASE_STATUS = JSON.parse(AllAccountsToPayApp.DEFAULT_PURCHASE_STATUS)
    // CURRENT VIEW VARS
    AllAccountsToPayApp.accountsToPayAgainstReceipt = []
    AllAccountsToPayApp.accountsToPayMassive = []
    AllAccountsToPayApp.totalDueAmount = document.getElementById('totalDueAmount')
    AllAccountsToPayApp.totalCount = document.getElementById('totalCount')
    AllAccountsToPayApp.totalBalanceAmount = document.getElementById('totalBalanceAmount')
    AllAccountsToPayApp.percentageBalanceProgressEl = document.getElementById('percentageBalanceProgress')
    AllAccountsToPayApp.paymentsByNoteNumber = []






    // Create boostrap modal object ------------------------------
    $( document ).ready(function() {
      // Init MODAL ADD MASSIVE PAYMENT
      AllAccountsToPayApp.ModalAddPaymentMultiple = new bootstrap.Modal(document.getElementById('AddPaymentMultipleModal'))
      // Confirm button to add massive payment - MODAL
      AllAccountsToPayApp.addMassivePaymentBtn = document.getElementById('add-massive-payment')
      AllAccountsToPayApp.addMassivePaymentBtn.addEventListener('click', AllAccountsToPayApp.confirmAddMassivePayment);
      // form vars
      AllAccountsToPayApp.form = document.getElementById('new-massive-payment-form')
      // VARS - PAGO MASIVO
      AllAccountsToPayApp.ModalSupplierToPayMassive
      AllAccountsToPayApp.ModalQtyAccountsToPayMassive
      AllAccountsToPayApp.ModalTotalAmountToPayMassive
      // Init MODAL ADD CONTRA RECIBO
      AllAccountsToPayApp.ModalNewAgainstReceiptModal = new bootstrap.Modal(document.getElementById('NewAgainstReceiptModal'))
      // Confirm button to create new contra recibo - MODAL
      AllAccountsToPayApp.newAgainstReceiptBtn = document.getElementById('new-against-receipt')
      AllAccountsToPayApp.newAgainstReceiptBtn.addEventListener('click', AllAccountsToPayApp.confirmNewAgainstReceipt);
      //VARS - CONTRA RECIBO
      AllAccountsToPayApp.ModalSupplierAgainstReceipt
      AllAccountsToPayApp.ModalQtyAccountsAgainstReceipt
      AllAccountsToPayApp.ModalTotalAmountAgainstReceipt
      AllAccountsToPayApp.ModalPaymentMethodAgainstReceipt
      AllAccountsToPayApp.ModalStatusAgainstReceipt
      AllAccountsToPayApp.ModalUserAgainstReceipt
      AllAccountsToPayApp.ModalEmailAgainstReceipt

    })

    // call initial functions
    AllAccountsToPayApp.setInitialValues()
    AllAccountsToPayApp.getProviderAccountsToPayDataTable()
    AllAccountsToPayApp.getMoneyAccountsToPayDataTable()
    AllAccountsToPayApp.buildMoneyAccountCards()
  }

  // SEND DATA TO ADD MASSIVE PAYMENT TO SERVER
  // TODO: in progress
  AllAccountsToPayApp.confirmAddMassivePayment = async () => {
    // SHOW SPINNER
    AllAccountsToPayApp.loadingSpinnerMsg.textContent = 'Agregando pago masivo...'
    AllAccountsToPayApp.loadingSpinner.classList.remove('d-none')
    // console.log(AllAccountsToPayApp.accountsToPayMassive)

    // hide modal after submit
    AllAccountsToPayApp.ModalAddPaymentMultiple.hide()
    const numberOfNotes = AllAccountsToPayApp.ModalQtyAccountsToPayMassive.textContent
    const totalAmountToPay = parseFloat(AllAccountsToPayApp.ModalTotalAmountToPayMassive.textContent.replace(/[\$,]/g, ''))

    // FORM
    const fd = new FormData(AllAccountsToPayApp.form)
    fd.append('accountsToPay', JSON.stringify(AllAccountsToPayApp.accountsToPayMassive))
    fd.append('resume', JSON.stringify({
      totalCount: numberOfNotes,
      totalAmountToPay,
      providerName: AllAccountsToPayApp.ModalSupplierToPayMassive.textContent
    }))

    const urlEncoded = new URLSearchParams(fd).toString()
    console.log(urlEncoded);


    console.log(`${apiUrl}/payments/add-massive-payment`);
    const response = await fetch(`${apiUrl}/payments/add-massive-payment`, {
      method: 'POST',
      body: urlEncoded,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    })
    let result = await response.json()
    console.log(response.status)
    console.log(result);
    if (response.status === 422) {
      AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
      let inputEls = AllAccountsToPayApp.form.getElementsByClassName('input-valid')
      console.log(result)
      let errors = result.errors
      console.log(inputEls)

      Array.from(inputEls).forEach(inputValid => {
        errors.forEach((err) => {
          // console.log(err)
          let invalidMsg = inputValid.parentElement.getElementsByClassName('invalid-message')[0]

          if (inputValid.name === err.param) {
            console.log(err)
            // console.log(invalidMsg)
            invalidMsg.textContent = err.msg
            invalidMsg.classList.remove('d-none')
          }
        })
        
      })
    } else if (response.status === 400 || response.status === 404) {
      AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
      let failureMessageAlert = document.getElementById('failure-message')
      failureMessageAlert.classList.remove('d-none')
      failureMessageAlert.textContent = result.message

      setTimeout(() => {
        failureMessageAlert.classList.add('d-none')
      }, "4000");
    }
    else if (response.status === 201 || response.status === 200) {
      // TODO: deselect rows table
      AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
      let successMessageAlert = document.getElementById('success-message')
      successMessageAlert.textContent = result.message
      successMessageAlert.classList.remove('d-none')

      setTimeout(() => {
        successMessageAlert.classList.add('d-none')
        // AllAccountsToPayApp.submitUpdateBtn.disabled = true
        // Simulate an HTTP redirect:
        // window.location.replace(`${apiUrl}/purchases/payments-done`);
      }, "4000");
    }
  }

  // SEND DATA TO CREATE NEW AGAINST RECEIPT - CONTRA RECIBO
  // TODO: in progress
  AllAccountsToPayApp.confirmNewAgainstReceipt = async () => {
    console.log('creando contra recibo...')
    // // SHOW SPINNER
    // AllAccountsToPayApp.loadingSpinnerMsg.textContent = 'Agregando pago masivo...'
    // AllAccountsToPayApp.loadingSpinner.classList.remove('d-none')
    // // console.log(AllAccountsToPayApp.accountsToPayMassive)

    // // hide modal after submit
    // AllAccountsToPayApp.ModalAddPaymentMultiple.hide()
    // const numberOfNotes = AllAccountsToPayApp.ModalQtyAccountsToPayMassive.textContent
    // const totalAmountToPay = parseFloat(AllAccountsToPayApp.ModalTotalAmountToPayMassive.textContent.replace(/[\$,]/g, ''))

    // // FORM
    // const fd = new FormData(AllAccountsToPayApp.form)
    // fd.append('accountsToPay', JSON.stringify(AllAccountsToPayApp.accountsToPayMassive))
    // fd.append('resume', JSON.stringify({
    //   totalCount: numberOfNotes,
    //   totalAmountToPay,
    //   providerName: AllAccountsToPayApp.ModalSupplierToPayMassive.textContent
    // }))

    // const urlEncoded = new URLSearchParams(fd).toString()
    // console.log(urlEncoded);


    // console.log(`${apiUrl}/payments/add-massive-payment`);
    // const response = await fetch(`${apiUrl}/payments/add-massive-payment`, {
    //   method: 'POST',
    //   body: urlEncoded,
    //   headers: {
    //     'Content-Type': 'application/x-www-form-urlencoded'
    //   }
    // })
    // let result = await response.json()
    // console.log(response.status)
    // console.log(result);
    // if (response.status === 422) {
    //   AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
    //   let inputEls = AllAccountsToPayApp.form.getElementsByClassName('input-valid')
    //   console.log(result)
    //   let errors = result.errors
    //   console.log(inputEls)

    //   Array.from(inputEls).forEach(inputValid => {
    //     errors.forEach((err) => {
    //       // console.log(err)
    //       let invalidMsg = inputValid.parentElement.getElementsByClassName('invalid-message')[0]

    //       if (inputValid.name === err.param) {
    //         console.log(err)
    //         // console.log(invalidMsg)
    //         invalidMsg.textContent = err.msg
    //         invalidMsg.classList.remove('d-none')
    //       }
    //     })
        
    //   })
    // } else if (response.status === 400 || response.status === 404) {
    //   AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
    //   let failureMessageAlert = document.getElementById('failure-message')
    //   failureMessageAlert.classList.remove('d-none')
    //   failureMessageAlert.textContent = result.message

    //   setTimeout(() => {
    //     failureMessageAlert.classList.add('d-none')
    //   }, "4000");
    // }
    // else if (response.status === 201 || response.status === 200) {
    //   // TODO: deselect rows table
    //   AllAccountsToPayApp.loadingSpinner.classList.add('d-none')
    //   let successMessageAlert = document.getElementById('success-message')
    //   successMessageAlert.textContent = result.message
    //   successMessageAlert.classList.remove('d-none')

    //   setTimeout(() => {
    //     successMessageAlert.classList.add('d-none')
    //     // AllAccountsToPayApp.submitUpdateBtn.disabled = true
    //     // Simulate an HTTP redirect:
    //     // window.location.replace(`${apiUrl}/purchases/payments-done`);
    //   }, "4000");
    // }
  }

  // GET PAYMENTS BY NOTE NUMBER -------------------------------------------
  AllAccountsToPayApp.fetchPaymentsByProvider = async (noteNumber) => {
    // AllPurchasesApp.paymentsByNoteNumber = []
    const response = await fetch(`${apiUrl}/purchases/${noteNumber}/with-payments`);
    const result = await response.json();
    console.log(result)
    if (response.status === 400 || response.status === 404 || response.status >= 500) {
      return new Error(result.message)
    }
    else if (response.status === 201 || response.status === 200) {
      console.log(result)
      return result
    }
  }

  // BUILD CARDS MONEY ACCOUNTS TO PAY
  AllAccountsToPayApp.buildMoneyAccountCards = () => {
    let moneyAccountsToPayCardRows = document.getElementById('moneyAccountsToPayCards')
    let templateBox = document.getElementById('cardTemplateMoneyAccountsToPay')
    let template = templateBox.content

    // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
    moneyAccountsToPayCardRows.innerHTML = ''
    
    if (jsonAccountsToPay.creditAccounts.length) {
      

      jsonAccountsToPay.creditAccounts.filter(account => {
        // Get the table element in which you want to add row
        console.log(account)
        // Create a row using the inserRow() method and
        // specify the index where you want to add the row
        let tr = template.cloneNode(true)
        let cuentaNombre = tr.querySelector('.moneyAccountName')
        let cuentaCodigo = tr.querySelector('.moneyAccountCode')
        // let cuentaLimite = tr.querySelector('.moneyAccountLimit')
        let cuentaSaldo = tr.querySelector('.moneyAccountBalance')
        let cuentaDiferencia = tr.querySelector('.moneyAccountDifference')
        let cuentaUsoDisponible = tr.querySelector('.moneyAccountPercentageAvailable')
        let cuentaUsoDisponibleChild = cuentaUsoDisponible.firstElementChild

        console.log(cuentaUsoDisponibleChild)
        cuentaNombre.textContent = account.Nombre
        cuentaCodigo.textContent = account.Codigo
        // cuentaLimite.textContent = `Limite: ${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(account.Limite)}`
        cuentaSaldo.textContent = `Disponible: ${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(account.Saldo)}`

        cuentaDiferencia.textContent = `Utilizado: ${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(account.diferencia)}`
        console.log(parseInt((account.Saldo / account.Limite) * 100))
        cuentaUsoDisponible.ariaValueNow = `${parseFloat((account.Saldo / account.Limite) * 100).toString()}`
        cuentaUsoDisponibleChild.style.width = `${parseInt((account.Saldo / account.Limite) * 100).toString()}%`
        cuentaUsoDisponibleChild.textContent = parseFloat((account.Saldo / account.Limite) * 100).toFixed(2).toString().concat('%')
        moneyAccountsToPayCardRows.appendChild(tr)
      })
    }
  }

  // ESTABLECER VALORES INICIALES
  AllAccountsToPayApp.setInitialValues = () => {
    AllAccountsToPayApp.totalDueAmount.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(jsonAccountsToPay.totalAmount)
    AllAccountsToPayApp.totalCount.textContent = jsonAccountsToPay.totalCount
    AllAccountsToPayApp.totalBalanceAmount.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(jsonAccountsToPay.totalBalanceAmount)
    let html = undefined
    if (jsonAccountsToPay.percentageBalanceProgress <= 0.7) { // Urgente subir!
      let span1 = document.createElement('span')
      span1.className = 'badge badge-pill bg-soft-danger text-danger me-2'
      let i = document.createElement('i')
      i.className = 'bi bi-arrow-up me-1'
      // let p = document.createElement('p')
      span1.textContent = new Intl.NumberFormat('es-MX', { style: 'percent' }).format(jsonAccountsToPay.percentageBalanceProgress)
      let span2 = document.createElement('span')
      span2.className = 'text-nowrap text-xs text-body-emphasis'
      span2.textContent = 'Urgente subir!'
      span1.appendChild(i)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span1)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span2)

      // html = `<span class="badge badge-pill bg-soft-danger text-danger me-2">
      //                 <i class="bi bi-arrow-up me-1"></i>${new Intl.NumberFormat('es-MX', { style: 'percent' }).format(jsonAccountsToPay.percentageBalanceProgress)}
      //             </span>`
      // <span class="text-nowrap text-xs text-muted">Debes subir!</span> -->

    } else if (jsonAccountsToPay.percentageBalanceProgress > 0.7 && jsonAccountsToPay.percentageBalanceProgress <= 0.8) { // debes subir
      let span1 = document.createElement('span')
      span1.className = 'badge badge-pill bg-soft-warning text-warning-emphasis me-2'
      let i = document.createElement('i')
      i.className = 'bi bi-arrow-up me-1'
      // let p = document.createElement('p')
      span1.textContent = new Intl.NumberFormat('es-MX', { style: 'percent' }).format(jsonAccountsToPay.percentageBalanceProgress)
      let span2 = document.createElement('span')
      span2.className = 'text-nowrap text-xs text-body-emphasis'
      span2.textContent = 'Un poco m√°s arriba!'
      span1.appendChild(i)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span1)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span2)
    } else if (jsonAccountsToPay.percentageBalanceProgress > 0.8 && jsonAccountsToPay.percentageBalanceProgress <= 0.9) { // promedio
      let span1 = document.createElement('span')
      span1.className = 'badge badge-pill bg-soft-success text-success me-2'
      let i = document.createElement('i')
      i.className = 'bi bi-arrow-up me-1'
      // let p = document.createElement('p')
      span1.textContent = new Intl.NumberFormat('es-MX', { style: 'percent' }).format(jsonAccountsToPay.percentageBalanceProgress)
      let span2 = document.createElement('span')
      span2.className = 'text-nowrap text-xs text-body-emphasis'
      span2.textContent = 'Bien! Est√°s en el promedio!'
      span1.appendChild(i)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span1)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span2)
    } else { // muy bien!
      let span1 = document.createElement('span')
      span1.className = 'badge badge-pill bg-soft-success text-success me-2'
      let i = document.createElement('i')
      i.className = 'bi bi-arrow-up me-1'
      // let p = document.createElement('p')
      span1.textContent = new Intl.NumberFormat('es-MX', { style: 'percent' }).format(jsonAccountsToPay.percentageBalanceProgress)
      let span2 = document.createElement('span')
      span2.className = 'text-nowrap text-xs text-body-emphasis'
      span2.textContent = 'Muy bien!'
      span1.appendChild(i)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span1)
      AllAccountsToPayApp.percentageBalanceProgressEl.appendChild(span2)
    }
    // AllAccountsToPayApp.percentageBalanceProgressEl.innerHTML = html
  }

  // CONSTRUIR TABLA DE CUENTAS POR PAGAR
  AllAccountsToPayApp.getProviderAccountsToPayDataTable = async () => {

    // DATATABLE ------------
    let accountsToPayTable = $('#accountsToPayTable').DataTable({
        responsive: true,
        fixedHeader: true,
        // footerCallback: function (row, data, start, end, display) {
        //     var api = this.api();

        //     // Remove the formatting to get integer data for summation
        //     var intVal = function (i) {
        //         // return i
        //         // return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : Number(i.replace(/[\$,]/g, '') * 1);
        //         // return isNaN(i) === true ? 0 : typeof i === 'string' ? isNaN(i.replace(/[\$,]/g, '') * 1) : typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
        //         return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : typeof i === 'number' ? i : 0;

        //     };
        //     // console.log(intVal)
        //     console.log(api.column(3, {page: 'current'}).data())
        //     // Total over this page
        //     let pageTotal = api
        //         .column(2, { page: 'current' })
        //         .data()
        //         .reduce(function (a, b) {
        //           console.log(`Numero: ${intVal(a)}`)
        //             // a = isNaN(a) === true ? 0 : a
        //             // b = isNaN(b) === true ? 0 : b
        //             return intVal(a) + intVal(b);
        //         });
        //     console.log(`Total: ${pageTotal}`)

        //     // Update footer
        //     $(api.column(2).footer()).html(new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(pageTotal));
        // },
        headerCallback: function(thead, data, start, end, display) {
          $(thead).find('th').css('border-bottom', 'none');
        },
        paging: true,
        data: jsonAccountsToPay.accountsToPay,
        stripeClasses: [ 'strip1', 'strip2' ],
        columns: [
            { data: null, orderable: false, className: 'select-checkbox', defaultContent: '', width: '5%' },
            { title: 'No. Nota', data: 'No Nota' },
            { title: 'Proveedor', data: 'Proveedor'},
            { title: 'Monto Total', data: 'Monto Total'},
            { title: 'Fecha Recibido', data: 'Fecha Recibido' },
            { title: 'Fecha a Pagar', data: 'Fecha a Pagar', orderable: false, searchable: false, visible: false },
            { title: 'Estatus', data: 'Estatus', orderable: false }, //5
            { title: 'Desde hace', data: null, orderable: false, searchable: false },

            // { title: 'Tipo', data: 'Tipo', visible: true },
            // { title: 'Usuario', data: 'Usuario', orderable: false, visible: true },
            // { title: 'Detalles', data: 'Detalles', visible: false, searchable: false },
            { title: 'Editar', orderable: false, searchable: false }, // 9
            // { title: 'Eliminar', orderable: false, searchable: false }
        ],
        columnDefs: [
          { className: "fw-bold", targets: 3, width: "10%", render: function (data) {
              const formatNumber = isNaN(data.replace(/[\$,]/g, '') * 1) ? 0 : data.replace(/[\$,]/g, '') * 1;
              return `${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(formatNumber)}`
            }
          },
          { className: "fw-bold", targets: 1, width: '5%', render: function (data) {
              return `#${data}`
            }
          },
          { targets: 2, width: "25%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '13px')
            } 
          },
          { className: "fw-bold text-center", targets: 6, width: '5%',
            createdCell: function (td, cellData, rowData, row, col) {
              if (cellData === 'PAGO PARCIAL') {
                $(td).html('<span class="dot dot-partial"></span>')
              } else if (cellData === 'PENDIENTE DE PAGO') {
                $(td).html('<span class="dot dot-pending"></span>')
              }
            }
          },
          { targets: [4, 5], width: "10%",
            render: function ( data, type, row, meta ) {
              // console.log(data)
              // return data
              if (data.length > 0) {
                return type === 'sort' || type === 'display' || type === 'filter' ? (moment(new Date(data)).format("DD MMM YYYY")) : new Date(data)
              } else return "n/a"
            }
          },
          { targets: 7, width: "10%", className: 'text-center',
            createdCell: function (td, cellData, rowData, row, col) {
              // console.log(rowData)
              // return data
              $(td).html(`<span>${moment().diff(new Date(rowData['Fecha Recibido']), 'days')} d√≠as</span>`)

            }
          },
          { targets: 8, "width": "5%", className: "text-center",
            render: function (data, type, row, meta) {
              return `
              <div class="dropdown">
                <button type="button" id="dropdownMenuEdit" class="btn btn-light" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></button>
                <ul style="font-size: 14px;" class="dropdown-menu" aria-labelledby="dropdownMenuEdit">
                  <li>
                    <a href="/payments/add-payment/${Number(row['No Nota'])}" class="text-dark dropdown-item">
                    Abonar&nbsp;<i class="bi bi-cash"></i>
                    </a>
                  </li>
                </ul>
              </div> 
              `
            } 
          },
          // { "targets": 10, "width": "10%", className: "text-center",
          //   "render": function (data, type, row, meta) {
          //     return '<button type="button" disabled class="btn btn-sm btn-danger remove-purchase" onclick="removeCompra('+row[0]+')"><i class="bi bi-trash3"></i></button>'
          //   }
          // },
        ],
        order: [[4, 'desc']],
        select: {
          style: 'os',
          selector: 'td:first-child'
        },
        // select: {
        //   style: 'multiple',
        //   selector: 'tr>td:nth-child(3), tr>td:nth-child(4), tr>td:nth-child(5)'
        // },
        buttons: [
          {
            extend: 'selectAll',
            text: '<i class="bi bi-list-check" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          {
            extend: 'selectNone',
            text: '<i class="bi bi-list" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          {
            extend: 'colvis',
            text: '<span style="font-size: 12px;">Ver/ocultar</span>',
            // titleAttr: 'Show/Hide',
            columns: ':not(.noVis)',
            collectionLayout: 'fixed columns',
            collectionTitle: 'Seleccionar columnas a ver'
          },
          { 
            extend: 'pdfHtml5',
            orientation: 'landscape',
            pageSize: 'LEGAL',
            messageTop: 'Este documento es informativo.',
            messageBottom: datetimeExportText,
            text: '<i class="bi bi-filetype-pdf"></i>', 
            className: 'btn btn-dark',
            footer: true,
            title: 'Lista de cuenta por pagars',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
          { extend: 'copy', 
            text: '<i class="bi bi-clipboard-check"></i>', 
            className: 'btn btn-dark',
            title: 'Lista de cuentas por pagar',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
          { // BOTON ACCION - NUEVO CONTRA RECIBO
            text: '<span style="font-size: 12px;">Nuevo CR</span>',
            className: 'btn btn-primary btn-sm btn-new-contra-recibo',
            action: function (e, dt, node, config) {
              // cuentas a pagar seleccionadas
              let accountsToPaySelected = []
              // agregar a array cuentas seleccionadas
              accountsToPayTable.rows( { selected: true } ).data().each(el => {
                accountsToPaySelected.push(el)
              })

              // let user = document.getElementById('userCheck').value;
              // En caso de array cuentas seleccionadas este vacio o solo tenga un elemento
              if (accountsToPaySelected.length <= 1) { // mostrar mensaje de error
                document.getElementById('invalid-message-user-check').classList.remove('d-none')
                setTimeout(() => {
                  document.getElementById('invalid-message-user-check').classList.add('d-none')
                }, 3000)
              } else { // En caso de array tenga 2 o mas cuentas seleccionadas
                // GUARD STATEMENT - VALID IF PROVIDER IS THE SAME IN ACCOUNTS TO PAY SELECTED ARRAY
                const compareSupplierName = accountsToPaySelected[0].Proveedor
                // const compareSupplierStatus = accountsToPayData[0].Estatus
                const suppliersAreTheSame = accountsToPaySelected.every(account => { // valid supplier names and status value are the same - PENDIENTE DE PAGO
                  return account.Proveedor === compareSupplierName && account.Estatus === AllAccountsToPayApp.DEFAULT_PURCHASE_STATUS.PENDIENTE_DE_PAGO
                })
                // const suppliersAreTheSame = accountsToPaySelected.every(account => account.Proveedor === compareSupplier)
                if (!suppliersAreTheSame) { // in case suppliers are not the same
                  return alert(new Error(`üòïUps, los proveedores seleccionados deben ser iguales y tener el estatus 'PENDIENTE DE PAGO' para realizar un pago masivo.`))
                } else { // in case are the same
                  // alert('Todos los proveedores coinciden')
                  AllAccountsToPayApp.accountsToPayAgainstReceipt = accountsToPaySelected
                  console.log(AllAccountsToPayApp.accountsToPayAgainstReceipt)

                  // sum amount of all accounts to pay
                  const totalAmountAccountsToPay = AllAccountsToPayApp.accountsToPayAgainstReceipt.reduce((acc, value) => {
                    return parseFloat(acc['Monto Total'].replace(/[\$,]/g, '')) + parseFloat(value['Monto Total'].replace(/[\$,]/g, ''))
                  });

                  // SET DATA TO MODAL ACCOUNTS TO PAY AGAINST RECEIPT
                  // Assign initial values to offcanvas
                  AllAccountsToPayApp.ModalSupplierAgainstReceipt = document.getElementById('supplierAgainstReceipt')
                  AllAccountsToPayApp.ModalQtyAccountsAgainstReceipt = document.getElementById('qtyAccountsAgainstReceipt')
                  AllAccountsToPayApp.ModalTotalAmountAgainstReceipt = document.getElementById('totalAmountAgainstReceipt')
                  // AllAccountsToPayApp.ModalPaymentMethodToPayMassive = document.getElementById('paymentMethodToPayMassive')

                  // Assign values
                  AllAccountsToPayApp.ModalSupplierAgainstReceipt.textContent = AllAccountsToPayApp.accountsToPayAgainstReceipt[0].Proveedor
                  AllAccountsToPayApp.ModalQtyAccountsAgainstReceipt.textContent = AllAccountsToPayApp.accountsToPayAgainstReceipt.length
                  AllAccountsToPayApp.ModalTotalAmountAgainstReceipt.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(totalAmountAccountsToPay)
                  
                  // Get elements from off canvas table
                  let table = document.getElementById("newAgainstReceiptTable");

                  // // GUARD STATEMENT
                  // if (AllAccountsToPayApp.paymentsByNoteNumber instanceof Error) {
                  //   table.classList.add('d-none')
                  //   paymentsNotFoundMsg.classList.remove('d-none')
                  // } else {
                    console.log('pagos dentro')
                    // Assign payments data to table in offcanvas

                    let accountsToPayAgainstReceiptRows = document.getElementById('accountsToPayAgainstReceiptRows')
                    let templateBox = document.getElementById('accountsToPayAgainstReceiptRowsTemplate')
                    let template = templateBox.content

                    // let quantityNotesEl = document.getElementById('quantityNotes');
                    // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
                    // let providerToPaySelected = document.getElementById('providerToPaySelected')

                    // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
                    accountsToPayAgainstReceiptRows.innerHTML = ''
                    // $('#payment-invoice-tbody tr').remove()
                    // data.each(element => console.log(element));
                    // let getTotalAmountToPay = data.map(row => {
                    //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
                    //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
                    //   return totalAmount
                    // }).reduce((a, b) => parseFloat(a + b), 0);
                    // console.log(getTotalAmountToPay)
                    AllAccountsToPayApp.accountsToPayAgainstReceipt.filter(accountToPay => {
                      // Get the table element in which you want to add row
                      console.log(accountToPay)
                      // Create a row using the inserRow() method and
                      // specify the index where you want to add the row
                      let tr = template.cloneNode(true)
                      let noteNumberCol = tr.querySelector('.noteNumber')
                      let totalAmountCol = tr.querySelector('.totalAmount')
                      let dateReceivedCol= tr.querySelector('.dateReceived')

                      noteNumberCol.textContent = `#${accountToPay['No Nota']}`
                      totalAmountCol.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(accountToPay['Monto Total'].replace(/[\$,]/g, ''))
                      dateReceivedCol.textContent = moment(new Date(accountToPay['Fecha Recibido'])).format("DD MMM YYYY")
                     
                      accountsToPayAgainstReceiptRows.appendChild(tr)
                    })
                  // }
                  // SHOW MODAL CEHCKOUT - ACCOUNTS TO PAY MASSIVE
                  // $( document ).ready(function() {
                    AllAccountsToPayApp.ModalNewAgainstReceiptModal.show()
                  // })
                }

                // sendEmailPurchasesSelected(accountsToPaySelected)

              }
                // events.prepend( '<div>'+count+' row(s) selected</div>' );
            }
          },
          { // BOTON ACCION - AGREGAR PAGO MASIVO
            text: '<span style="font-size: 12px;">Abono masivo</span>',
            className: 'btn btn-primary btn-sm btn-add-payment-multiple',
            action: function (e, dt, node, config) {
              // cuentas a pagar seleccionadas
              let accountsToPaySelected = []
              // agregar a array cuentas seleccionadas
              accountsToPayTable.rows( { selected: true } ).data().each(el => {
                accountsToPaySelected.push(el)
              })

              // let user = document.getElementById('userCheck').value;
              // En caso de array cuentas seleccionadas este vacio o solo tenga un elemento
              if (accountsToPaySelected.length <= 1) { // mostrar mensaje de error
                document.getElementById('invalid-message-user-check').classList.remove('d-none')
                setTimeout(() => {
                  document.getElementById('invalid-message-user-check').classList.add('d-none')
                }, 3000)
              } else { // En caso de array tenga 2 o mas cuentas seleccionadas
                // GUARD STATEMENT - VALID IF PROVIDER IS THE SAME IN ACCOUNTS TO PAY SELECTED ARRAY
                const compareSupplierName = accountsToPaySelected[0].Proveedor
                // const compareSupplierStatus = accountsToPayData[0].Estatus
                const suppliersAreTheSame = accountsToPaySelected.every(account => { // valid supplier names and status value are the same - PENDIENTE DE PAGO
                  return account.Proveedor === compareSupplierName && account.Estatus === AllAccountsToPayApp.DEFAULT_PURCHASE_STATUS.PENDIENTE_DE_PAGO
                })
                // const suppliersAreTheSame = accountsToPaySelected.every(account => account.Proveedor === compareSupplier)
                if (!suppliersAreTheSame) { // in case suppliers are not the same
                  return alert(new Error(`üòïUps, los proveedores seleccionados deben ser iguales y tener el estatus 'PENDIENTE DE PAGO' para realizar un pago masivo.`))
                } else { // in case are the same
                  // alert('Todos los proveedores coinciden')
                  AllAccountsToPayApp.accountsToPayMassive = accountsToPaySelected
                  console.log(AllAccountsToPayApp.accountsToPayMassive)

                  // sum amount of all accounts to pay
                  const totalAmountAccountsToPay = AllAccountsToPayApp.accountsToPayMassive.reduce((acc, value) => {
                    return parseFloat(acc['Monto Total'].replace(/[\$,]/g, '')) + parseFloat(value['Monto Total'].replace(/[\$,]/g, ''))
                  });

                  // SET DATA TO MODAL ACCOUNTS TO PAY MASSIVE
                  // Assign initial values to offcanvas
                  AllAccountsToPayApp.ModalSupplierToPayMassive = document.getElementById('supplierToPayMassive')
                  AllAccountsToPayApp.ModalQtyAccountsToPayMassive = document.getElementById('qtyAccountsToPayMassive')
                  AllAccountsToPayApp.ModalTotalAmountToPayMassive = document.getElementById('totalAmountToPayMassive')
                  AllAccountsToPayApp.ModalPaymentMethodToPayMassive = document.getElementById('paymentMethodToPayMassive')

                  // Assign values
                  AllAccountsToPayApp.ModalSupplierToPayMassive.textContent = AllAccountsToPayApp.accountsToPayMassive[0].Proveedor
                  AllAccountsToPayApp.ModalQtyAccountsToPayMassive.textContent = AllAccountsToPayApp.accountsToPayMassive.length
                  AllAccountsToPayApp.ModalTotalAmountToPayMassive.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(totalAmountAccountsToPay)
                  
                  // Get elements from off canvas table
                  let table = document.getElementById("addPaymentsMultipleTable");

                  // // GUARD STATEMENT
                  // if (AllAccountsToPayApp.paymentsByNoteNumber instanceof Error) {
                  //   table.classList.add('d-none')
                  //   paymentsNotFoundMsg.classList.remove('d-none')
                  // } else {
                    console.log('pagos dentro')
                    // Assign payments data to table in offcanvas

                    let accountsToPayMassiveRows = document.getElementById('accountsToPayMassiveRows')
                    let templateBox = document.getElementById('accountsToPayMassiveRowTemplate')
                    let template = templateBox.content

                    // let quantityNotesEl = document.getElementById('quantityNotes');
                    // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
                    // let providerToPaySelected = document.getElementById('providerToPaySelected')

                    // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
                    accountsToPayMassiveRows.innerHTML = ''
                    // $('#payment-invoice-tbody tr').remove()
                    // data.each(element => console.log(element));
                    // let getTotalAmountToPay = data.map(row => {
                    //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
                    //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
                    //   return totalAmount
                    // }).reduce((a, b) => parseFloat(a + b), 0);
                    // console.log(getTotalAmountToPay)
                    AllAccountsToPayApp.accountsToPayMassive.filter(accountToPay => {
                      // Get the table element in which you want to add row
                      console.log(accountToPay)
                      // Create a row using the inserRow() method and
                      // specify the index where you want to add the row
                      let tr = template.cloneNode(true)
                      let noteNumberCol = tr.querySelector('.noteNumber')
                      let totalAmountCol = tr.querySelector('.totalAmount')
                      let dateReceivedCol= tr.querySelector('.dateReceived')

                      noteNumberCol.textContent = `#${accountToPay['No Nota']}`
                      totalAmountCol.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(accountToPay['Monto Total'].replace(/[\$,]/g, ''))
                      dateReceivedCol.textContent = moment(new Date(accountToPay['Fecha Recibido'])).format("DD MMM YYYY")
                     
                      accountsToPayMassiveRows.appendChild(tr)
                    })
                  // }
                  // SHOW MODAL CEHCKOUT - ACCOUNTS TO PAY MASSIVE
                  // $( document ).ready(function() {
                    AllAccountsToPayApp.ModalAddPaymentMultiple.show()
                  // })
                }

                // sendEmailPurchasesSelected(accountsToPaySelected)

              }
                // events.prepend( '<div>'+count+' row(s) selected</div>' );
            }
          }
        ],
        "lengthMenu": [ 10, 20, 40, 60 ],
        "pageLength": 20,
        "language": {
          "buttons": {
            copyTitle: 'Datos copiados al portapapeles',
            copySuccess: {
                _: "%d productos copiados al portapapeles"
            },
            colvis: 'Ver/ocultar columnas'
          },
          "decimal":        "",
          "emptyTable":     "No se encontraron datos",
          "info":           "Mostrando _START_ a _END_ de _TOTAL_ cuentas por pagar",
          "infoEmpty":      "Mostrando 0 a 0 de 0 entries",
          "infoFiltered":   "(Busqueda de _MAX_ cuentas por pagar en total)",
          "infoPostFix":    "",
          "thousands":      ",",
          "lengthMenu":     "Mostrar _MENU_ cuentas",
          "loadingRecords": "Cargando...",
          "processing":     "",
          "search":         "Buscar:",
          "zeroRecords":    "No se encontraron cuentas por pagar",
          "paginate": {
              "first":      "Primero",
              "last":       "Ultimo",
              "next":       "Siguiente",
              "previous":   "Atr√°s"
          },
          "aria": {
              "sortAscending":  ": activate to sort column ascending",
              "sortDescending": ": activate to sort column descending"
          }
        },
        // createdRow: function( row, data, dataIndex ) {
        //   details = data[10].toString()
        //   if (details.includes('NU') || details.includes('CREDITO NU') || details.includes('TARJETA NU')) {
        //     $(row).css('background-color', '#E2B6FF');
        //   }
        // },
        drawCallback: function() {
          $('#accountsToPayTable_paginate ul.pagination').addClass("pagination-sm");
        }
      });

      // SHOW OFF CANVAS ACCOUNT TO PAY RESUME DETAILS
      $('#accountsToPayTable tbody').on('click', 'tr td:nth-child(3)', async function () {
          var data = accountsToPayTable.row( this ).data();
          console.log(data)
          AllAccountsToPayApp.paymentsByNoteNumber = await AllAccountsToPayApp.fetchPaymentsByProvider(data['No Nota'])
          console.log(AllAccountsToPayApp.paymentsByNoteNumber)
          // GUARD STATEMENT
          // if (!res) return
          const bsOffcanvas = new bootstrap.Offcanvas('#offCanvasAccountToPayPayments')

          // Assign initial values to offcanvas
          AllAccountsToPayApp.offCanvasPaymentsTitle = document.getElementById('offCanvasAccountToPayPaymentsTitle')
          AllAccountsToPayApp.offCanvasPaymentsNote = document.getElementById('offCanvasAccountToPayPaymentsNote')
          AllAccountsToPayApp.offCanvasUserNote = document.getElementById('offCanvasAccountToPayUserNote')
          AllAccountsToPayApp.offCanvasAccountToPayDateRecordNote = document.getElementById('offCanvasAccountToPayDateRecordNote')
          AllAccountsToPayApp.offCanvasAccountToPayTypeNote = document.getElementById('offCanvasAccountToPayTypeNote')
          AllAccountsToPayApp.offCanvasTotalPurchaseAmount = document.getElementById('accountToPayTotalPurchaseAmount')
          AllAccountsToPayApp.offCanvasAccountToPayBalance = document.getElementById('offCanvasAccountToPayBalance')

          AllAccountsToPayApp.offCanvasAccountToPayEstatusNote = document.getElementById('offCanvasAccountToPayEstatusNote')
          AllAccountsToPayApp.offCanvasPurchaseDetails = document.getElementById('offCanvasAccountToPayDetails')

          // Assign values
          AllAccountsToPayApp.offCanvasPaymentsTitle.textContent = data.Proveedor
          AllAccountsToPayApp.offCanvasPaymentsNote.textContent = `#${data['No Nota']}`
          AllAccountsToPayApp.offCanvasUserNote.textContent = `${data.Usuario || 'n/a'}`
          AllAccountsToPayApp.offCanvasAccountToPayDateRecordNote.textContent = data['Fecha Recibido']
          AllAccountsToPayApp.offCanvasAccountToPayTypeNote.textContent = data.Tipo
          AllAccountsToPayApp.offCanvasAccountToPayEstatusNote.textContent = data.Estatus
          AllAccountsToPayApp.offCanvasTotalPurchaseAmount.textContent = new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(data['Monto Total'].replace(/[\$,]/g, ''))

          AllAccountsToPayApp.offCanvasAccountToPayBalance.textContent = AllAccountsToPayApp.paymentsByNoteNumber instanceof Error
          ? new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(0)
          : new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(AllAccountsToPayApp.paymentsByNoteNumber.balance)
          AllAccountsToPayApp.offCanvasPurchaseDetails.textContent = data.Detalles || 'n/a'
          // Get elements from off canvas table
          let table = document.getElementById("accountToPayPaymentsResumeTable");
          let paymentsNotFoundMsg = document.getElementById('accountToPayPaymentsNotFoundMessage')
          let providerPaymentsTotalQuantity = document.getElementById('accountToPayProviderPaymentsTotalQuantity')

          // GUARD STATEMENT
          if (AllAccountsToPayApp.paymentsByNoteNumber instanceof Error) {
            table.classList.add('d-none')
            paymentsNotFoundMsg.classList.remove('d-none')
          } else {
            // Assign payments data to table in offcanvas
            paymentsNotFoundMsg.classList.add('d-none')
            table.classList.remove('d-none')

            let paymentResumeRows = document.getElementById('accountToPayPaymentResumeRows')
            let templateBox = document.getElementById('rowTemplate')
            let template = templateBox.content

            // let quantityNotesEl = document.getElementById('quantityNotes');
            // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
            // let providerToPaySelected = document.getElementById('providerToPaySelected')

            // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
            paymentResumeRows.innerHTML = ''
            // $('#payment-invoice-tbody tr').remove()
            // data.each(element => console.log(element));
            // let getTotalAmountToPay = data.map(row => {
            //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
            //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
            //   return totalAmount
            // }).reduce((a, b) => parseFloat(a + b), 0);
            // console.log(getTotalAmountToPay)
            if (AllAccountsToPayApp.paymentsByNoteNumber.payments.length > 0) {
              AllAccountsToPayApp.paymentsByNoteNumber.payments.filter(payment => {
                // Get the table element in which you want to add row
                console.log(payment)
                // Create a row using the inserRow() method and
                // specify the index where you want to add the row
                let tr = template.cloneNode(true)
                let folioCol = tr.querySelector('.folio')
                let montoCol = tr.querySelector('.monto')
                let fechaCol = tr.querySelector('.fecha')
                let formaDePagoCol = tr.querySelector('.formaDePago')
                let cuentaCol = tr.querySelector('.cuenta')
                let usuarioCol = tr.querySelector('.usuario')

                folioCol.textContent = payment.Folio
                montoCol.textContent = payment.Monto
                fechaCol.textContent = new Intl.DateTimeFormat('es-MX', { dateStyle: 'medium' }).format(new Date(payment.FechaDePago))
                formaDePagoCol.textContent = payment.FormaDePago
                cuentaCol.textContent = payment.CuentaDeDinero
                usuarioCol.textContent = payment.Usuario

                paymentResumeRows.appendChild(tr)
              })
            }
            providerPaymentsTotalQuantity.textContent = `Cant. de pagos realizados: ${AllAccountsToPayApp.paymentsByNoteNumber.totalCount}`
          }
          bsOffcanvas.show()
      } );

      // Custom filtering function which will search data in column four between two values
      $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
          if (settings.nTable.id !== 'accountsToPayTable') {
            return true
          }
          let min = moment($('#minCuentasPorPagar').val()).isValid() ?
            new Date( $('#minCuentasPorPagar').val() ).setUTCHours(0,0,0,0) :
            null;

          let max = moment($('#maxCuentasPorPagar').val()).isValid() ?
            new Date( $('#maxCuentasPorPagar').val() ).setUTCHours(23,59,59,999):
            null;

          let splitDate = data[3].split(' ')

          let monthSelected
          for (let prop in months) {
            if (prop.toString().toLowerCase() === splitDate[1].toString().toLowerCase()) {
              monthSelected = months[prop]
              break
            }
          }
          let mon = Number(format_Date(monthSelected)) - 1;
          let date = new Date(Number(splitDate[2]), Number(mon), Number(splitDate[0])).setUTCHours(23, 59, 59, 999)

          if (
            ( min === null && max === null ) ||
            ( min === null && date <= max ) ||
            ( min <= date && max === null ) ||
            ( min <= date && date <= max )
          ) {
            return true;
          }
          return false;
        }
      );

      // Refilter the table
      $('#minCuentasPorPagar, #maxCuentasPorPagar').on('change', function () {
        // $('#accountsToPayTable').DataTable().draw()
        accountsToPayTable.draw();
      });
    
      accountsToPayTable.buttons().container().appendTo('#buttons-wrapper-accounts-to-pay');
      // document.getElementById('total-purchases').textContent = `${accountsToPayData.values.length} cuenta por pagars`
      // loadingSpinner.classList.add('d-none')

  }

  // CONSTRUIR TABLA DE CUENTAS POR PAGAR
  AllAccountsToPayApp.getMoneyAccountsToPayDataTable = async () => {

// DATATABLE ------------
let moneyAccountsToPayTable = $('#moneyAccountsToPayTable').DataTable({
    responsive: true,
    fixedHeader: true,
    paging: false,
    // scrollX: false,
    // footerCallback: function (row, data, start, end, display) {
    //     var api = this.api();

    //     // Remove the formatting to get integer data for summation
    //     var intVal = function (i) {
    //         // return i
    //         // return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : Number(i.replace(/[\$,]/g, '') * 1);
    //         // return isNaN(i) === true ? 0 : typeof i === 'string' ? isNaN(i.replace(/[\$,]/g, '') * 1) : typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
    //         return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : typeof i === 'number' ? i : 0;

    //     };
    //     // console.log(intVal)
    //     console.log(api.column(3, {page: 'current'}).data())
    //     // Total over this page
    //     let pageTotal = api
    //         .column(2, { page: 'current' })
    //         .data()
    //         .reduce(function (a, b) {
    //           console.log(`Numero: ${intVal(a)}`)
    //             // a = isNaN(a) === true ? 0 : a
    //             // b = isNaN(b) === true ? 0 : b
    //             return intVal(a) + intVal(b);
    //         });
    //     console.log(`Total: ${pageTotal}`)

    //     // Update footer
    //     $(api.column(2).footer()).html(new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(pageTotal));
    // },
    headerCallback: function(thead, data, start, end, display) {
      $(thead).find('th').css('border-bottom', 'none');
    },
    data: jsonAccountsToPay.creditAccounts,
    stripeClasses: [ 'strip1', 'strip2' ],
    columns: [
        { title: 'C√≥digo', data: 'Codigo' },
        { title: 'Nombre', data: 'Nombre'},
        { title: 'Disponible', data: 'Saldo'},
        { title: 'Limite', data: 'Limite' },
        { title: 'Usado', data: 'diferencia' },
        { title: 'Tipo', data: 'Tipo', orderable: false, searchable: false }, //5
        { title: 'Uso', data: 'Uso', orderable: false, searchable: false },
        { title: 'Editar', orderable: false, searchable: false },
    ],
    columnDefs: [
      { className: "fw-bold", "targets": 1, "width": "20%" },
      { className: "fw-bold", "targets": 0, width: '5%'},
      { targets: [2,3,4], width: "10%", render: function (data,type,row,meta) {
          return `${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(data)}`
        }
      },
      { targets: 5, width: '10%' },
      { targets: 6, render: $.fn.dataTable.render.ellipsis( 16, true ), createdCell: function (td, cellData, rowData, row, col) {
          $(td).css('font-size', '12px')
        }  
      },
      { targets: 7, "width": "5%", className: "text-center",
        render: function (data, type, row, meta) {
          return `
          <div class="dropdown">
            <button type="button" id="dropdownMenuEdit" class="btn btn-light" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></button>
            <ul style="font-size: 14px;" class="dropdown-menu" aria-labelledby="dropdownMenuEdit">
              <li><button type="button" class="text-dark fw-bold dropdown-item add-payment-link" data-purchase-id="${row[0]}">Movimientos</button></li>
              <li><button type="button" class="text-dark dropdown-item edit-purchase-link" data-purchase-id="${row[0]}">Depositar</button></li>
            </ul>
          </div> 
          `
        }
      },
    ],
    order: [[2, 'asc']],
    select: {
      style: 'multiple',
      selector: 'tr>td:nth-child(3), tr>td:nth-child(4), tr>td:nth-child(5)'
    },
    buttons: [
      {
        extend: 'selectAll',
        text: '<i class="bi bi-list-check" style="font-size: 1.2rem"></i>',
        className: 'btn btn-sm btn-dark'
      },
      {
        extend: 'selectNone',
        text: '<i class="bi bi-list" style="font-size: 1.2rem"></i>',
        className: 'btn btn-sm btn-dark'
      },
      {
        extend: 'colvis',
        text: '<span style="font-size: 12px;">Ver/ocultar</span>',
        // titleAttr: 'Show/Hide',
        columns: ':not(.noVis)',
        collectionLayout: 'fixed columns',
        collectionTitle: 'Seleccionar columnas a ver'
      },
      { 
        extend: 'pdfHtml5',
        orientation: 'landscape',
        pageSize: 'LEGAL',
        messageTop: 'Este documento es informativo.',
        messageBottom: datetimeExportText,
        text: '<i class="bi bi-filetype-pdf"></i>', 
        className: 'btn btn-dark',
        footer: true,
        title: 'Lista de cuenta de retiro',
        exportOptions: {
          columns: ':visible',
          modifier: {
            selected: true
          }
        },
      },
      { extend: 'copy', 
        text: '<i class="bi bi-clipboard-check"></i>', 
        className: 'btn btn-dark',
        title: 'Lista de cuentas de retiro',
        exportOptions: {
          columns: ':visible',
          modifier: {
            selected: true
          }
        },
      },
      // {
      //   text: '<span style="font-size: 12px;">Enviar selecci√≥n</span>',
      //   className: 'btn btn-secondary btn-sm btn-send-purchases',
      //   action: function (e, dt, node, config) {
      //     let purchasesSelected = []
      //     accountsToPayTable.rows( { selected: true } ).data().each(el => {
      //       purchasesSelected.push(el)
      //     })
      //     // let user = document.getElementById('userCheck').value;
      //     if (!purchasesSelected.length) {
      //       document.getElementById('invalid-message-user-check').classList.remove('d-none')
      //       setTimeout(() => {
      //         document.getElementById('invalid-message-user-check').classList.add('d-none')
      //       }, 3000)
      //     } else {
      //       console.log(purchasesSelected.length)
      //       sendEmailPurchasesSelected(purchasesSelected)

      //     }
      //       // events.prepend( '<div>'+count+' row(s) selected</div>' );
      //   }
      // }
    ],
    // "lengthMenu": [ 5,10,15 ],
    "lengthChange": false,
    "language": {
      "buttons": {
        copyTitle: 'Datos copiados al portapapeles',
        copySuccess: {
            _: "%d productos copiados al portapapeles"
        },
        colvis: 'Ver/ocultar columnas'
      },
      "decimal":        "",
      "emptyTable":     "No se encontraron datos",
      "info":           "Mostrando _START_ a _END_ de _TOTAL_ cuentas de retiro",
      "infoEmpty":      "Mostrando 0 a 0 de 0 entradas",
      "infoFiltered":   "(Busqueda de _MAX_ cuentas de retiro en total)",
      "infoPostFix":    "",
      "thousands":      ",",
      "lengthMenu":     "Mostrar _MENU_ cuentas",
      "loadingRecords": "Cargando...",
      "processing":     "",
      "search":         "Buscar:",
      "zeroRecords":    "No se encontraron cuentas de retiro",
      "aria": {
          "sortAscending":  ": activate to sort column ascending",
          "sortDescending": ": activate to sort column descending"
      }
    },
    // createdRow: function( row, data, dataIndex ) {
    //   details = data[10].toString()
    //   if (details.includes('NU') || details.includes('CREDITO NU') || details.includes('TARJETA NU')) {
    //     $(row).css('background-color', '#E2B6FF');
    //   }
    // },
    drawCallback: function() {
      $('#moneyAccountsToPayTable_paginate ul.pagination').addClass("pagination-sm");
    }
  });



  // $('#accountsToPayTable tbody').on('click', 'tr td:nth-child(2)', async function () {
  //     var data = accountsToPayTable.row( this ).data();
  //     console.log(data)
  //     AllAccountsToPayApp.paymentsByNoteNumber = await AllAccountsToPayApp.fetchPaymentsByProvider(data['No Nota'])
  //     console.log(AllAccountsToPayApp.paymentsByNoteNumber)
  //     // GUARD STATEMENT
  //     // if (!res) return
  //     const bsOffcanvas = new bootstrap.Offcanvas('#offCanvasPayments')

  //     // Assign initial values to offcanvas
  //     AllAccountsToPayApp.offCanvasPaymentsTitle = document.getElementById('offCanvasPaymentsTitle')
  //     AllAccountsToPayApp.offCanvasPaymentsNote = document.getElementById('offCanvasPaymentsNote')
  //     AllAccountsToPayApp.offCanvasTotalPurchaseAmount = document.getElementById('totalPurchaseAmount')
  //     AllAccountsToPayApp.offCanvasPurchaseDetails = document.getElementById('offCanvasPurchaseDetails')

  //     // Assign values
  //     AllAccountsToPayApp.offCanvasPaymentsTitle.textContent = data.Proveedor
  //     AllAccountsToPayApp.offCanvasPaymentsNote.textContent = `#${data['No Nota']} | Registrado por: ${data.Usuario || 'n/a'}`
  //     AllAccountsToPayApp.offCanvasTotalPurchaseAmount.textContent = data['Monto Total']
  //     AllAccountsToPayApp.offCanvasPurchaseDetails.textContent = data.Detalles || 'n/a'
  //     // Get elements from off canvas table
  //     let table = document.getElementById("paymentsResumeTable");
  //     let paymentsNotFoundMsg = document.getElementById('paymentsNotFoundMessage')
  //     let providerPaymentsTotalQuantity = document.getElementById('providerPaymentsTotalQuantity')

  //     // GUARD STATEMENT
  //     if (!AllAccountsToPayApp.paymentsByNoteNumber || !AllAccountsToPayApp.paymentsByNoteNumber.length) {
  //       table.classList.add('d-none')
  //       paymentsNotFoundMsg.classList.remove('d-none')
  //     } else {
  //       // Assign payments data to table in offcanvas
  //       paymentsNotFoundMsg.classList.add('d-none')
  //       table.classList.remove('d-none')

  //       let paymentResumeRows = document.getElementById('paymentResumeRows')
  //       let templateBox = document.getElementById('rowTemplate')
  //       let template = templateBox.content

  //       // let quantityNotesEl = document.getElementById('quantityNotes');
  //       // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
  //       // let providerToPaySelected = document.getElementById('providerToPaySelected')

  //       // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
  //       paymentResumeRows.innerHTML = ''
  //       // $('#payment-invoice-tbody tr').remove()
  //       // data.each(element => console.log(element));
  //       // let getTotalAmountToPay = data.map(row => {
  //       //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
  //       //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
  //       //   return totalAmount
  //       // }).reduce((a, b) => parseFloat(a + b), 0);
  //       // console.log(getTotalAmountToPay)
  //       if (AllAccountsToPayApp.paymentsByNoteNumber.length > 0) {
  //         AllAccountsToPayApp.paymentsByNoteNumber.filter(payment => {
  //           // Get the table element in which you want to add row
  //           console.log(payment[0])
  //           // Create a row using the inserRow() method and
  //           // specify the index where you want to add the row
  //           let tr = template.cloneNode(true)
  //           let folioCol = tr.querySelector('.folio')
  //           let montoCol = tr.querySelector('.monto')
  //           let fechacol = tr.querySelector('.fecha')
  //           let formaDePagoCol = tr.querySelector('.formaDePago')
  //           let cuentaCol = tr.querySelector('.cuenta')
  //           let usuarioCol = tr.querySelector('.usuario')

  //           folioCol.textContent = payment[0].Folio
  //           montoCol.textContent = payment[0].Monto
  //           fechacol.textContent = new Intl.DateTimeFormat('es-MX', { dateStyle: 'medium' }).format(new Date(payment[0].FechaDePago))
  //           formaDePagoCol.textContent = payment[0].FormaDePago
  //           cuentaCol.textContent = payment[0].CuentaDeDinero
  //           usuarioCol.textContent = payment[0].Usuario

  //           paymentResumeRows.appendChild(tr)
  //         })
  //       }
  //       providerPaymentsTotalQuantity.textContent = `Cant. de pagos realizados: ${AllAccountsToPayApp.paymentsByNoteNumber.length}`
  //     }
  //     bsOffcanvas.show()
  // } );

  moneyAccountsToPayTable.buttons().container().appendTo('#buttons-wrapper-money-accounts-to-pay');
  // document.getElementById('total-purchases').textContent = `${accountsToPayData.values.length} cuenta por pagars`
  // loadingSpinner.classList.add('d-none')
}

  AllAccountsToPayApp.onLoad()
</script>
