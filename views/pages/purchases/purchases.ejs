<!-- titulo -->
<div class="app-page-title">
  <div class="page-title-wrapper">
    <div class="page-title-heading">
      <div>
        <h3>Compras</h3>
        <div class="page-title-subheading">Este es un demo (en proceso) del nuevo sistema interno de Mercado DOS MIL.</div>
      </div>
    </div>
  </div>
</div>

<!-- TABLE -->
<div class="table-responsive mb-3">
  <div class="row justify-content-end text-end">
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="minCompras" name="minCompras" placeholder="Fecha inicio">
      </div> -->
      <label class="text-secondary m-0 p-0" style="font-size: 12px;">Inicio</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon1"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="minCompras" aria-label="minCompras" aria-describedby="basic-addon1">
      </div>
    </div>
    <div class="col-md-2 text-start">
      <!-- <div class="input-group input-group-sm date mb-3" data-provide="datepicker">
        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
        <input style="font-size: 13px;" type="text" class="form-control" id="maxCompras" name="maxCompras" placeholder="Fecha fin">
      </div> -->
      <label class="text-secondary m-0 p-0" style="font-size: 12px;">Fin</label>
      <div class="input-group input-group-sm date" data-provide="datepicker">
        <span class="input-group-addon input-group-text" id="basic-addon2"><i class="bi bi-calendar-event"></i></span><input type="text" class="form-control" id="maxCompras" aria-label="maxCompras" aria-describedby="basic-addon2">
      </div>
    </div>
    <!-- button wrapper purchases-->
    <div class="col-8">
      <div id="buttons-wrapper-purchases" class="mb-1"></div><br>
      <div id="invalid-message-user-check" class="invalid-message-user-check text-start d-none mt-1" style="font-size: 12px; color: red;">
        Por favor selecciona mas de 1 compra.
      </div>
    </div>
  </div>
  <table id="purchasesTable" class="display compact hover stripe" width="100%" style="font-size: 12px;">
    <tfoot>
      <tr>
        <th colspan="3" class="text-start">Total:</th>
        <th></th>
      </tr>
    </tfoot>
  </table>
</div>



<%- include('../../partials/scripts'); %>




<script>
  
  const nodeEnv = '<%= process.env.NODE_ENV %>'
  let apiUrl = '<%= process.env.API_URL %>'
  console.log(apiUrl)
  console.log(nodeEnv)
  let purchasesData = '<%- jsonResponse %>'
  purchasesData = purchasesData.replace(/\s+/g," ")

  let jsonPurchases = JSON.parse(purchasesData)
  console.log(jsonPurchases)

  var datetimeExportText = "Exportado el dÃ­a: " + new Intl.DateTimeFormat('es-MX', { dateStyle: 'long', timeStyle: 'medium', hour12: true }).format(new Date())

  const AllPurchasesApp = {}

  AllPurchasesApp.onLoad = () => {
    AllPurchasesApp.getDataTable()

    AllPurchasesApp.paymentsByNoteNumber = []
  }

  AllPurchasesApp.fetchPaymentsByProvider = async (noteNumber) => {
    // AllPurchasesApp.paymentsByNoteNumber = []
    const response = await fetch(`${apiUrl}/purchases/${noteNumber}/with-payments`);
    const result = await response.json();
    console.log(result)
    if (response.status === 400 || response.status === 404 || response.status >= 500) {
      return new Error(result.message)
    }
    else if (response.status === 201 || response.status === 200) {
      console.log(result)
      return result
    }
  }

  AllPurchasesApp.getDataTable = async () => {

    // DATATABLE ------------
    let purchasesTable = $('#purchasesTable').DataTable({
                // responsive: true,
        fixedHeader: true,
        // footerCallback: function (row, data, start, end, display) {
        //     var api = this.api();

        //     // Remove the formatting to get integer data for summation
        //     var intVal = function (i) {
        //         // return i
        //         // return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : Number(i.replace(/[\$,]/g, '') * 1);
        //         // return isNaN(i) === true ? 0 : typeof i === 'string' ? isNaN(i.replace(/[\$,]/g, '') * 1) : typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
        //         return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : isNaN(i.replace(/[\$,]/g, '') * 1) === true ? 0 : typeof i === 'number' ? i : 0;

        //     };
        //     // console.log(intVal)
        //     console.log(api.column(3, {page: 'current'}).data())
        //     // Total over this page
        //     let pageTotal = api
        //         .column(2, { page: 'current' })
        //         .data()
        //         .reduce(function (a, b) {
        //           console.log(`Numero: ${intVal(a)}`)
        //             // a = isNaN(a) === true ? 0 : a
        //             // b = isNaN(b) === true ? 0 : b
        //             return intVal(a) + intVal(b);
        //         });
        //     console.log(`Total: ${pageTotal}`)

        //     // Update footer
        //     $(api.column(2).footer()).html(new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(pageTotal));
        // },
        paging: true,
        data: jsonPurchases.purchasesData,
        stripeClasses: [ 'strip1', 'strip2' ],
        columns: [
            { title: 'ID', data: 'ID', visible: false, searchable: false, orderable: false },
            { title: 'No. Nota', data: 'No Nota' },
            { title: 'Proveedor', data: 'Proveedor'},
            { title: 'Monto Total', data: 'Monto Total'},
            { title: 'Fecha Recibido', data: 'Fecha Recibido' },
            { title: 'Fecha a Pagar', data: 'Fecha a Pagar', orderable: false, searchable: false, visible: false },
            { title: 'Estatus', data: 'Estatus', orderable: false },
            { title: 'Tipo', data: 'Tipo', visible: true },
            { title: 'Usuario', data: 'Usuario', orderable: false, visible: true },
            { title: 'Detalles', data: 'Detalles', visible: false, searchable: false },
            { title: 'Editar', orderable: false, searchable: false }, // 9
            // { title: 'Eliminar', orderable: false, searchable: false }
        ],
        columnDefs: [
          { className: "fw-bold", targets: 3, width: "10%", render: function (data, type, row, meta) {
              if (!data) data = 0
              const formatNumber = isNaN(data.replace(/[\$,]/g, '') * 1) ? 0 : data.replace(/[\$,]/g, '') * 1;
              return `${new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(formatNumber)}`
            }
          },
          { className: "fw-bold", targets: 1, render: function (data) {
              return `#${data}`
            }
          },
          { targets: 2, "width": "25%", createdCell: function (td, cellData, rowData, row, col) {
              $(td).css('font-size', '13px')
            } 
          },
          { className: "fw-bold", targets: 6, 
            createdCell: function (td, cellData, rowData, row, col) {
              if ( cellData == 'LIQUIDADO' ) {
                $(td).css('color', 'green')
              } else if (cellData == 'PAGO PARCIAL') {
                $(td).css('color', 'blue')
              } else if (cellData == 'PENDIENTE DE PAGO') {
                $(td).css('color', '#F06610')
              }
            }
          },
          { targets: [4, 5], width: "10%",
            render: function ( data, type, row, meta ) {
              // console.log(data)
              // return data
              if (data.length > 0) {
                return type === 'sort' || type === 'display' || type === 'filter' ? (moment(new Date(data)).format("DD MMM YYYY")) : new Date(data)
              } else return "n/a"
            }
          },
          { targets: [7, 8], width: "10%" },
          { targets: 9, render: $.fn.dataTable.render.ellipsis( 10, true ) },
          { targets: 10, width: "5%", className: "text-center",
            render: function (data, type, row, meta) {
              // console.log(row.Estatus)
              return `
              <div class="dropdown">
                <button type="button" id="dropdownMenuEdit" class="btn btn-light btn-sm" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></button>
                <ul style="font-size: 14px;" class="dropdown-menu" aria-labelledby="dropdownMenuEdit">
                  ${row.Estatus !== 'LIQUIDADO' ? 
                  `<li><a href="/purchases/add-payment/${Number(row.ID)}" class="text-dark dropdown-item" style="pointer-events: none">
                    Abonar&nbsp;<i class="bi bi-cash"></i>
                    </a>
                  </li>
                  <li>
                    <a href="/purchases/edit/${Number(row.ID)}" class="text-dark dropdown-item">
                      Editar&nbsp;<i class="bi bi-pencil"></i>
                    </a>
                  </li>
                  <li>
                    <a href="#myModal" class="trigger-btn dropdown-item text-dark delete-purchase-button" data-toggle="modal">
                      Eliminar&nbsp;<i class="bi bi-trash3"></i>
                    </a>
                  </li>` :
                  `<li>
                    <a href="#myModal" class="trigger-btn dropdown-item text-dark delete-purchase-button" data-toggle="modal">
                      Eliminar&nbsp;<i class="bi bi-trash3"></i>
                    </a>
                  </li>`
                }
                </ul>
              </div> 
              `
            } 
          },
          // { "targets": 10, "width": "10%", className: "text-center",
          //   "render": function (data, type, row, meta) {
          //     return '<button type="button" disabled class="btn btn-sm btn-danger remove-purchase" onclick="removeCompra('+row[0]+')"><i class="bi bi-trash3"></i></button>'
          //   }
          // },
        ],
        order: [[4, 'desc']],
        select: {
          style: 'multiple',
          selector: 'tr>td:nth-child(3), td:nth-child(4), tr>td:nth-child(5), tr>td:nth-child(6), tr>td:nth-child(7)'
        },
        buttons: [
          {
            extend: 'selectAll',
            text: '<i class="bi bi-list-check" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          {
            extend: 'selectNone',
            text: '<i class="bi bi-list" style="font-size: 1.2rem"></i>',
            className: 'btn btn-sm btn-dark'
          },
          {
            extend: 'colvis',
            text: '<span style="font-size: 12px;">Ver/ocultar</span>',
            // titleAttr: 'Show/Hide',
            columns: ':not(.noVis)',
            collectionLayout: 'fixed columns',
            collectionTitle: 'Seleccionar columnas a ver'
          },
          { 
            extend: 'pdfHtml5',
            orientation: 'landscape',
            pageSize: 'LEGAL',
            messageTop: 'Este documento es informativo.',
            messageBottom: datetimeExportText,
            text: '<i class="bi bi-filetype-pdf"></i>', 
            className: 'btn btn-dark',
            footer: true,
            title: 'Lista de compras',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
          { extend: 'copy', 
            text: '<i class="bi bi-clipboard-check"></i>', 
            className: 'btn btn-dark',
            title: 'Lista de compras',
            exportOptions: {
              columns: ':visible',
              modifier: {
                selected: true
              }
            },
          },
          {
            text: '<span style="font-size: 12px;">Enviar selecciÃ³n</span>',
            className: 'btn btn-secondary btn-sm btn-send-purchases',
            action: function (e, dt, node, config) {
              let purchasesSelected = []
              purchasesTable.rows( { selected: true } ).data().each(el => {
                purchasesSelected.push(el)
              })
              // let user = document.getElementById('userCheck').value;
              if (!purchasesSelected.length) {
                document.getElementById('invalid-message-user-check').classList.remove('d-none')
                setTimeout(() => {
                  document.getElementById('invalid-message-user-check').classList.add('d-none')
                }, 3000)
              } else {
                console.log(purchasesSelected.length)
                sendEmailPurchasesSelected(purchasesSelected)

              }
                // events.prepend( '<div>'+count+' row(s) selected</div>' );
            }
          }
        ],
        "lengthMenu": [ 10, 20, 40, 60 ],
        "pageLength": 20,
        "language": {
          "buttons": {
            copyTitle: 'Datos copiados al portapapeles',
            copySuccess: {
                _: "%d productos copiados al portapapeles"
            },
            colvis: 'Ver/ocultar columnas'
          },
          "decimal":        "",
          "emptyTable":     "No se encontraron datos",
          "info":           "Mostrando _START_ a _END_ de _TOTAL_ compras",
          "infoEmpty":      "Mostrando 0 a 0 de 0 entries",
          "infoFiltered":   "(Busqueda de _MAX_ compras en total)",
          "infoPostFix":    "",
          "thousands":      ",",
          "lengthMenu":     "Mostrar _MENU_ compras",
          "loadingRecords": "Cargando...",
          "processing":     "",
          "search":         "Buscar:",
          "zeroRecords":    "No se encontraron compras",
          "paginate": {
              "first":      "Primero",
              "last":       "Ultimo",
              "next":       "Siguiente",
              "previous":   "AtrÃ¡s"
          },
          "aria": {
              "sortAscending":  ": activate to sort column ascending",
              "sortDescending": ": activate to sort column descending"
          }
        },
        // createdRow: function( row, data, dataIndex ) {
        //   details = data[10].toString()
        //   if (details.includes('NU') || details.includes('CREDITO NU') || details.includes('TARJETA NU')) {
        //     $(row).css('background-color', '#E2B6FF');
        //   }
        // },
        drawCallback: function() {
          $('#purchasesTable_paginate ul.pagination').addClass("pagination-sm");
        }
      });

      // SHOW OFF CANVAS PURCHASE RESUME DETAILS
      $('#purchasesTable tbody').on('click', 'tr td:nth-child(1)', async function () {
          var data = purchasesTable.row( this ).data();
          console.log(data)
          AllPurchasesApp.paymentsByNoteNumber = await AllPurchasesApp.fetchPaymentsByProvider(data['No Nota'])
          console.log(AllPurchasesApp.paymentsByNoteNumber)
          // GUARD STATEMENT
          // if (!res) return
          const bsOffcanvas = new bootstrap.Offcanvas('#offCanvasPayments')

          // Assign initial values to offcanvas
          AllPurchasesApp.offCanvasPaymentsTitle = document.getElementById('offCanvasPaymentsTitle')
          AllPurchasesApp.offCanvasPaymentsNote = document.getElementById('offCanvasPaymentsNote')
          AllPurchasesApp.offCanvasTotalPurchaseAmount = document.getElementById('totalPurchaseAmount')
          AllPurchasesApp.offCanvasPurchaseDetails = document.getElementById('offCanvasPurchaseDetails')

          // Assign values
          AllPurchasesApp.offCanvasPaymentsTitle.textContent = data.Proveedor
          AllPurchasesApp.offCanvasPaymentsNote.textContent = `#${data['No Nota']} | Registrado por: ${data.Usuario || 'n/a'}`
          AllPurchasesApp.offCanvasTotalPurchaseAmount.textContent = data['Monto Total']
          AllPurchasesApp.offCanvasPurchaseDetails.textContent = data.Detalles || 'n/a'
          
          // Get elements from off canvas table
          let table = document.getElementById("paymentsResumeTable");
          let paymentsNotFoundMsg = document.getElementById('paymentsNotFoundMessage')
          let providerPaymentsTotalQuantity = document.getElementById('providerPaymentsTotalQuantity')

          // GUARD STATEMENT
          if (AllPurchasesApp.paymentsByNoteNumber instanceof Error) {
            table.classList.add('d-none')
            paymentsNotFoundMsg.classList.remove('d-none')
          } else {
            console.log('pagos dentro')
            // Assign payments data to table in offcanvas
            paymentsNotFoundMsg.classList.add('d-none')
            table.classList.remove('d-none')

            let paymentResumeRows = document.getElementById('paymentResumeRows')
            let templateBox = document.getElementById('rowTemplate')
            let template = templateBox.content

            // let quantityNotesEl = document.getElementById('quantityNotes');
            // let totalBalanceToPayEl = document.getElementById('totalBalanceToPay');
            // let providerToPaySelected = document.getElementById('providerToPaySelected')

            // GUARD STATEMENT --- CHECK IF TABLE HAS ELEMENTS
            paymentResumeRows.innerHTML = ''
            // $('#payment-invoice-tbody tr').remove()
            // data.each(element => console.log(element));
            // let getTotalAmountToPay = data.map(row => {
            //   let totalAmount = row[6].split('$')[1].trim().split(',').join('');
            //   totalAmount = totalAmount === '-' ? parseFloat('0.00') : parseFloat(totalAmount);
            //   return totalAmount
            // }).reduce((a, b) => parseFloat(a + b), 0);
            // console.log(getTotalAmountToPay)
            if (AllPurchasesApp.paymentsByNoteNumber.payments.length > 0) {
              AllPurchasesApp.paymentsByNoteNumber.payments.filter(payment => {
                // Get the table element in which you want to add row
                console.log(payment)
                // Create a row using the inserRow() method and
                // specify the index where you want to add the row
                let tr = template.cloneNode(true)
                let folioCol = tr.querySelector('.folio')
                let montoCol = tr.querySelector('.monto')
                let fechacol = tr.querySelector('.fecha')
                let formaDePagoCol = tr.querySelector('.formaDePago')
                let cuentaCol = tr.querySelector('.cuenta')
                let usuarioCol = tr.querySelector('.usuario')

                folioCol.textContent = payment.Folio
                montoCol.textContent = payment.Monto
                fechacol.textContent = new Intl.DateTimeFormat('es-MX', { dateStyle: 'medium' }).format(new Date(payment.FechaDePago))
                formaDePagoCol.textContent = payment.FormaDePago
                cuentaCol.textContent = payment.CuentaDeDinero
                usuarioCol.textContent = payment.Usuario

                paymentResumeRows.appendChild(tr)
              })
            }
            providerPaymentsTotalQuantity.textContent = `Cant. de pagos realizados: ${AllPurchasesApp.paymentsByNoteNumber.totalCount}`
          }
          bsOffcanvas.show()
      } );

      // Custom filtering function which will search data in column four between two values
      $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
          if (settings.nTable.id !== 'purchasesTable') {
            return true
          }
          let min = moment($('#minCompras').val()).isValid() ?
            new Date( $('#minCompras').val() ).setUTCHours(0,0,0,0) :
            null;

          let max = moment($('#maxCompras').val()).isValid() ?
            new Date( $('#maxCompras').val() ).setUTCHours(23,59,59,999):
            null;

          let splitDate = data[4].split(' ')

          let monthSelected
          for (let prop in months) {
            if (prop.toString().toLowerCase() === splitDate[1].toString().toLowerCase()) {
              monthSelected = months[prop]
              break
            }
          }
          let mon = Number(format_Date(monthSelected)) - 1;
          let date = new Date(Number(splitDate[2]), Number(mon), Number(splitDate[0])).setUTCHours(23, 59, 59, 999)

          if (
            ( min === null && max === null ) ||
            ( min === null && date <= max ) ||
            ( min <= date && max === null ) ||
            ( min <= date && date <= max )
          ) {
            return true;
          }
          return false;
        }
      );

      // Refilter the table
      $('#minCompras, #maxCompras').on('change', function () {
        // $('#purchasesTable').DataTable().draw()
        purchasesTable.draw();
      });
    
      purchasesTable.buttons().container().appendTo('#buttons-wrapper-purchases');
      // document.getElementById('total-purchases').textContent = `${purchasesData.values.length} compras`
      // loadingSpinner.classList.add('d-none')
  }

  AllPurchasesApp.onLoad()
</script>

